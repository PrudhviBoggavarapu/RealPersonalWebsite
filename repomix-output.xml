This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
src/
  articles/
    first.toml
  lib/
    blog_stuff/
      Footer.svelte
      Header.svelte
    components/
      icons/
        ExternalLinkIcon.svelte
        GithubIcon.svelte
        LinkedinIcon.svelte
        LogoPlaceholder.svelte
        MoonIcon.svelte
        SunIcon.svelte
      ui/
        avatar/
          avatar-fallback.svelte
          avatar-image.svelte
          avatar.svelte
          index.ts
        badge/
          badge.svelte
          index.ts
        button/
          button.svelte
          index.ts
        card/
          card-action.svelte
          card-content.svelte
          card-description.svelte
          card-footer.svelte
          card-header.svelte
          card-title.svelte
          card.svelte
          index.ts
        input/
          index.ts
          input.svelte
        separator/
          index.ts
          separator.svelte
        sheet/
          index.ts
          sheet-content.svelte
          sheet-description.svelte
          sheet-footer.svelte
          sheet-header.svelte
          sheet-overlay.svelte
          sheet-title.svelte
    frontpage/
      Footer.svelte
      Header.svelte
    server/
      blogPosts.ts
    stores/
      themeStore.ts
    index.ts
    themeUtils.ts
    utils.ts
  routes/
    blog/
      [slug]/
        +page.server.ts
        +page.svelte
      +page.server.ts
      +page.svelte
    linktree/
      +page.svelte
    tags/
      [tag]/
        +page.server.ts
        +page.svelte
      +page.server.ts
      +page.svelte
    +layout.svelte
    +page.svelte
  app.css
  app.d.ts
  app.html
.gitignore
.npmrc
.prettierignore
.prettierrc
components.json
eslint.config.js
firefoxtemp.sh
package.json
postcss.config.js
README.md
style.md
svelte.config.js
tailwind.config.ts
tsconfig.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/lib/blog_stuff/Footer.svelte">
<script lang="ts">
	import { Button } from '$lib/components/ui/button';
	import { Separator } from '$lib/components/ui/separator';
	import ExternalLinkIcon from '$lib/components/icons/ExternalLinkIcon.svelte';
	import GithubIcon from '$lib/components/icons/GithubIcon.svelte';
	import LinkedinIcon from '$lib/components/icons/LinkedinIcon.svelte';
	import { goto } from '$app/navigation';

	const currentYear = new Date().getFullYear();
</script>

<footer class="w-full bg-background">
	<Separator />
	<div class="mx-auto">
		<div class="flex flex-col gap-8 md:flex md:flex-row md:items-stretch">
			<Separator orientation="vertical" class="w-1" />

			<div class="ml-8 mt-2 flex-1">
				<h3 class="mb-4 text-2xl font-black uppercase tracking-wider text-foreground">
					Quick Links
				</h3>
				<ul class="font-base space-y-3">
					<li>
						<a
							href="/"
							class="hover:bg-main hover:text-main-foreground inline-block border-4 border-transparent px-4 py-1 text-foreground transition-all duration-200 hover:border-border"
							>Home</a
						>
					</li>
					<li>
						<a
							href="/"
							class="hover:bg-main hover:text-main-foreground inline-block border-4 border-transparent px-4 py-1 text-foreground transition-all duration-200 hover:border-border"
							>Projects</a
						>
					</li>
					<li>
						<a
							href="/blog/"
							target="_blank"
							rel="noopener noreferrer"
							class="hover:bg-main hover:text-main-foreground inline-flex items-center border-4 border-transparent px-4 pb-4 text-foreground transition-all duration-200 hover:border-border"
						>
							Blogs
							<ExternalLinkIcon />
						</a>
					</li>
				</ul>
			</div>

			<Separator orientation="vertical" class="w-1" />

			<div class="mt-2 flex-1">
				<h3 class="mb-4 text-2xl font-black uppercase tracking-wider text-foreground">
					Get in Touch!
				</h3>
				<div class="mb-8 flex flex-col items-start">
					<div class="mb-6 flex space-x-6">
						<a
							href="https://github.com/prudhviboggavarapu"
							target="_blank"
							rel="noopener noreferrer"
							class="hover:text-main text-4xl text-foreground transition-colors duration-300"
							aria-label="GitHub"
						>
							<GithubIcon />
						</a>
						<a
							href="https://www.linkedin.com/in/prudhviboggavarapu/"
							target="_blank"
							rel="noopener noreferrer"
							class="hover:text-main text-4xl text-foreground transition-colors duration-300"
							aria-label="LinkedIn"
						>
							<LinkedinIcon />
						</a>
					</div>
					<Button
						variant="default"
						class="bg-[var(--neobrutalism-yellow-50)] text-black dark:bg-[var(--neobrutalism-yellow-50)]"
						onclick={() => goto('/linktree')}
					>
						Contact Me
					</Button>
				</div>
			</div>

			<Separator orientation="vertical" class="hidden md:block" />
			<div class="mt-2 flex-1">
				<h3 class="mb-4 text-2xl font-black uppercase tracking-wider text-foreground">
					Placeholder
				</h3>
				<p class="font-base text-foreground">Maybe some extra info here.</p>
			</div>
			<Separator orientation="vertical" class="w-1" />
		</div>

		<Separator />

		<div
			class="flex flex-col items-center justify-between gap-4 md:flex md:flex-row md:items-stretch"
		>
			<p class="ml-8 text-center font-bold text-foreground md:text-left">
				Â© {currentYear} Karma | Built with love by
				<a href="https://karmajaderose.com" class="text-main-foreground underline">Karma</a>
			</p>

			<Separator class="w-1/2 md:hidden" />

			<div
				class="content-evenly bg-black px-2 font-mono text-sm text-white dark:bg-background dark:text-foreground"
			>
				&lt;/&gt; with <a href="https://svelte.dev/" class="text-main-foreground hover:underline"
					>SvelteKit</a
				>
				+
				<a href="https://www.shadcn-svelte.com/" class="text-main-foreground hover:underline"
					>Shadcn UI Svelte</a
				>
			</div>
		</div>
		
	</div>
</footer>
</file>

<file path="src/lib/blog_stuff/Header.svelte">
<script lang="ts">
	import { Button } from '$lib/components/ui/button';
	import { themeStore } from '$lib/stores/themeStore';
	import {
		Sheet,
		SheetContent,
		SheetHeader,
		SheetTitle,
		SheetTrigger,
		SheetClose
	} from '$lib/components/ui/sheet';
	import { Separator } from '$lib/components/ui/separator';
	import { goto } from '$app/navigation';

	import LogoPlaceholder from '$lib/components/icons/LogoPlaceholder.svelte';
	import ExternalLinkIcon from '$lib/components/icons/ExternalLinkIcon.svelte';
	import SunIcon from '$lib/components/icons/SunIcon.svelte';
	import MoonIcon from '$lib/components/icons/MoonIcon.svelte';
	import Menu from '@lucide/svelte/icons/menu';
</script>

<nav class="bg-main shadow-shadow w-full border-4 border-border">
	<div class="mx-auto flex h-[64px] w-full items-center justify-between px-6">
		<h1
			class="text-main-foreground min-w-[50px] transform text-3xl font-black tracking-tight transition-transform duration-300 hover:rotate-0 lg:text-5xl"
		>
			<a href="/" class="text-main-foreground block">
				<LogoPlaceholder />
			</a>
		</h1>

		<div class="font-base hidden items-center space-x-6 text-base md:flex lg:text-lg">
			<a
				href="/"
				class="text-main-foreground transform px-3 py-1 font-bold transition-all duration-200 hover:-translate-y-1 hover:rotate-2"
				>Home</a
			>

			<a
				href="/tags"
				class="text-main-foreground transform px-3 py-1 font-bold transition-all duration-200 hover:-translate-y-1 hover:rotate-2"
				>Tag Search</a
			>
			<a
				href="/blog/"
				class="text-main-foreground transform px-3 py-1 font-bold transition-all duration-200 hover:-translate-y-1 hover:rotate-2"
			>
				Blogs
			</a>
			<div class="flex items-center gap-4">
				<Button variant="default" onclick={() => goto('/linktree')}>Contact Me</Button>
				<Button variant="neutral" size="icon" onclick={themeStore.toggle} aria-label="Toggle theme">
					{#if $themeStore.mounted}
						{#if $themeStore.isDark}
							<SunIcon />
						{:else}
							<MoonIcon />
						{/if}
					{/if}
					<span class="sr-only">Toggle theme</span>
				</Button>
			</div>
		</div>

		<div class="flex items-center gap-4 md:hidden">
			<Button variant="neutral" size="icon" onclick={themeStore.toggle} aria-label="Toggle theme">
				{#if $themeStore.mounted}
					{#if $themeStore.isDark}
						<SunIcon />
					{:else}
						<MoonIcon />
					{/if}
				{/if}
				<span class="sr-only">Toggle theme</span>
			</Button>

			<Sheet>
				<SheetTrigger
					class="inline-flex h-10 w-10 items-center justify-center whitespace-nowrap rounded-[var(--radius-base)] border-2 border-[var(--border)] text-sm font-[var(--font-weight-base)] shadow-[var(--shadow-shadow)] ring-offset-white transition-all hover:translate-x-[var(--spacing-boxShadowX)] hover:translate-y-[var(--spacing-boxShadowY)] hover:shadow-none focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-black focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0"
					aria-label="Open menu"
				>
					<Menu class="size-5" />
					<span class="sr-only">Open menu</span>
				</SheetTrigger>
				<SheetContent side="right" class="w-[280px] border-l-4 border-border bg-background p-6">
					<SheetHeader class="mb-6 text-left">
						<SheetTitle class="font-heading text-2xl">Menu</SheetTitle>
					</SheetHeader>
					<nav class="flex flex-col space-y-4">
						<SheetClose>
							<a href="/" class="hover:text-main block text-lg font-bold text-foreground">Home</a>
						</SheetClose>
						<SheetClose>
							<a href="/" class="hover:text-main block text-lg font-bold text-foreground">Journey</a
							>
						</SheetClose>
						<SheetClose>
							<a href="/" class="hover:text-main block text-lg font-bold text-foreground"
								>Projects</a
							>
						</SheetClose>
						<SheetClose>
							<a
								href="/blog/"
								target="_blank"
								rel="noopener noreferrer"
								class="hover:text-main inline-flex items-center gap-1 text-lg font-bold text-foreground"
							>
								Blogs
								<ExternalLinkIcon />
							</a>
						</SheetClose>

						<Separator class="my-4" />

						<SheetClose>
							<Button
								variant="default"
								class="w-full"
								onclick={() => {
									goto('/linktree');
								}}
							>
								Contact Me
							</Button>
						</SheetClose>
					</nav>
				</SheetContent>
			</Sheet>
		</div>
	</div>
</nav>
</file>

<file path="src/lib/components/icons/ExternalLinkIcon.svelte">
<!-- src/lib/components/icons/ExternalLinkIcon.svelte -->
<svg
	aria-hidden="true"
	focusable="false"
	width="1em"
	height="1em"
	style="display: inline-block; margin-left: 0.5rem;"
	viewBox="0 0 512 512"
	fill="currentColor"
	><path
		d="M352 0c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9L370.7 96 201.4 265.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L416 141.3l41.4 41.4c9.2 9.2 22.9 11.9 34.9 6.9s19.8-16.6 19.8-29.6l0-128c0-17.7-14.3-32-32-32L352 0zM80 32C35.8 32 0 67.8 0 112L0 432c0 44.2 35.8 80 80 80l320 0c44.2 0 80-35.8 80-80l0-112c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 112c0 8.8-7.2 16-16 16L80 448c-8.8 0-16-7.2-16-16l0-320c0-8.8 7.2-16 16-16l112 0c17.7 0 32-14.3 32-32s-14.3-32-32-32L80 32z"
	></path></svg
>
</file>

<file path="src/lib/components/icons/GithubIcon.svelte">
<!-- src/lib/components/icons/GithubIcon.svelte -->
<svg
	stroke="currentColor"
	fill="currentColor"
	stroke-width="0"
	viewBox="0 0 496 512"
	height="1em"
	width="1em"
	xmlns="http://www.w3.org/2000/svg"
	><path
		d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"
	></path></svg
>
</file>

<file path="src/lib/components/icons/LinkedinIcon.svelte">
<!-- src/lib/components/icons/LinkedinIcon.svelte -->
<svg
	stroke="currentColor"
	fill="currentColor"
	stroke-width="0"
	viewBox="0 0 448 512"
	height="1em"
	width="1em"
	xmlns="http://www.w3.org/2000/svg"
	><path
		d="M416 32H31.9C14.3 32 0 46.5 0 64.3v383.4C0 465.5 14.3 480 31.9 480H416c17.6 0 32-14.5 32-32.3V64.3c0-17.8-14.4-32.3-32-32.3zM135.4 416H69V202.2h66.5V416zm-33.2-243c-21.3 0-38.5-17.3-38.5-38.5S80.9 96 102.2 96c21.2 0 38.5 17.3 38.5 38.5 0 21.3-17.2 38.5-38.5 38.5zm282.1 243h-66.4V312c0-24.8-.5-56.7-34.5-56.7-34.6 0-39.9 27-39.9 54.9V416h-66.4V202.2h63.7v29.2h.9c8.9-16.8 30.6-34.5 62.9-34.5 67.2 0 79.7 44.3 79.7 101.9V416z"
	></path></svg
>
</file>

<file path="src/lib/components/icons/MoonIcon.svelte">
<!-- src/lib/components/icons/MoonIcon.svelte -->
<svg
	xmlns="http://www.w3.org/2000/svg"
	width="1em"
	height="1em"
	viewBox="0 0 24 24"
	fill="none"
	stroke="currentColor"
	stroke-width="2"
	stroke-linecap="round"
	stroke-linejoin="round"><path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z"></path></svg
>
</file>

<file path="src/lib/components/icons/SunIcon.svelte">
<!-- src/lib/components/icons/SunIcon.svelte -->
<svg
	xmlns="http://www.w3.org/2000/svg"
	width="1em"
	height="1em"
	viewBox="0 0 24 24"
	fill="none"
	stroke="currentColor"
	stroke-width="2"
	stroke-linecap="round"
	stroke-linejoin="round"
	><circle cx="12" cy="12" r="4"></circle><path d="M12 2v2"></path><path d="M12 20v2"></path><path
		d="m4.93 4.93 1.41 1.41"
	></path><path d="m17.66 17.66 1.41 1.41"></path><path d="M2 12h2"></path><path d="M20 12h2"
	></path><path d="m6.34 17.66-1.41 1.41"></path><path d="m19.07 4.93-1.41 1.41"></path></svg
>
</file>

<file path="src/lib/components/ui/avatar/avatar-fallback.svelte">
<script lang="ts">
	import { Avatar as AvatarPrimitive } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: AvatarPrimitive.FallbackProps = $props();
</script>

<AvatarPrimitive.Fallback
	bind:ref
	class={cn("bg-muted flex size-full items-center justify-center", className)}
	{...restProps}
/>
</file>

<file path="src/lib/components/ui/avatar/avatar-image.svelte">
<script lang="ts">
	import { Avatar as AvatarPrimitive } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: AvatarPrimitive.ImageProps = $props();
</script>

<AvatarPrimitive.Image bind:ref class={cn("aspect-square size-full", className)} {...restProps} />
</file>

<file path="src/lib/components/ui/avatar/avatar.svelte">
<script lang="ts">
	import { Avatar as AvatarPrimitive } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: AvatarPrimitive.RootProps = $props();
</script>

<AvatarPrimitive.Root
	bind:ref
	class={cn("relative flex size-10 shrink-0 overflow-hidden rounded-full", className)}
	{...restProps}
/>
</file>

<file path="src/lib/components/ui/avatar/index.ts">
import Root from "./avatar.svelte";
import Image from "./avatar-image.svelte";
import Fallback from "./avatar-fallback.svelte";

export {
	Root,
	Image,
	Fallback,
	//
	Root as Avatar,
	Image as AvatarImage,
	Fallback as AvatarFallback,
};
</file>

<file path="src/lib/components/ui/badge/badge.svelte">
<script lang="ts" module>
	import { type VariantProps, tv } from 'tailwind-variants';

	// --- MODIFICATIONS START HERE ---
	export const badgeVariants = tv({
		// Updated base styles using CSS variables
		base: 'inline-flex items-center justify-center rounded-[var(--radius-base)] border-2 border-[var(--border)] px-2.5 py-0.5 text-xs font-[var(--font-weight-base)] w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-[var(--ring)] focus-visible:ring-[var(--ring)]/50 focus-visible:ring-[3px] overflow-hidden',
		variants: {
			// Replaced variants with the new ones, using CSS variables
			variant: {
				default: 'bg-[var(--main)] text-[var(--main-foreground)]',
				neutral: 'bg-[var(--secondary-background)] text-[var(--foreground)]'
				// Original variants removed, add back if needed
			}
		},
		// Kept default variant
		defaultVariants: {
			variant: 'default'
		}
	});
	// --- MODIFICATIONS END HERE ---

	// Type automatically adapts to the new variants
	export type BadgeVariant = VariantProps<typeof badgeVariants>['variant'];
</script>

<script lang="ts">
	// No changes needed for these imports
	import type { WithElementRef } from 'bits-ui';
	import type { HTMLAnchorAttributes } from 'svelte/elements';
	import { cn } from '$lib/utils.js';
	// REMOVED the conflicting import: import type { BadgeVariant } from "./badge.svelte";

	// Props definition remains largely the same
	// BadgeVariant type is directly available from the module script above
	let {
		ref = $bindable(null),
		href,
		class: className,
		variant = 'default', // Default variant is now 'default' from new variants
		children,
		...restProps
	}: WithElementRef<HTMLAnchorAttributes> & {
		// Note: Original was Anchor, assuming span/a toggle is desired
		variant?: BadgeVariant;
	} = $props();
</script>

<!-- No changes in the template -->
<svelte:element
	this={href ? 'a' : 'span'}
	bind:this={ref}
	{href}
	class={cn(badgeVariants({ variant }), className)}
	{...restProps}
>
	{@render children?.()}
</svelte:element>

<!--
  Reminder: This component now relies on CSS variables defined in your global CSS (src/app.css),
  such as:
  --radius-base, --border, --font-weight-base, --ring, --main, --main-foreground,
  --secondary-background, --foreground

  Ensure these are correctly defined for the styles to apply.
-->
</file>

<file path="src/lib/components/ui/badge/index.ts">
export { default as Badge } from "./badge.svelte";
export { badgeVariants, type BadgeVariant } from "./badge.svelte";
</file>

<file path="src/lib/components/ui/button/index.ts">
import Root, {
	type ButtonProps,
	type ButtonSize,
	type ButtonVariant,
	buttonVariants,
} from "./button.svelte";

export {
	Root,
	type ButtonProps as Props,
	//
	Root as Button,
	buttonVariants,
	type ButtonProps,
	type ButtonSize,
	type ButtonVariant,
};
</file>

<file path="src/lib/components/ui/card/card-action.svelte">
<script lang="ts">
	// New component for CardAction
	import type { WithElementRef } from 'bits-ui';
	import type { HTMLAttributes } from 'svelte/elements';
	import { cn } from '$lib/utils.js';

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props();
</script>

<div
	bind:this={ref}
	data-slot="card-action"
	class={cn(
		// Classes for positioning within the CardHeader grid
		'col-start-2 row-span-2 row-start-1 self-start justify-self-end',
		className
	)}
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="src/lib/components/ui/card/card-content.svelte">
<script lang="ts">
	import type { WithElementRef } from 'bits-ui';
	import type { HTMLAttributes } from 'svelte/elements';
	import { cn } from '$lib/utils.js';

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props();
</script>

<div
	bind:this={ref}
	data-slot="card-content"
	class={cn(
		// Updated classes
		'px-6',
		className
	)}
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="src/lib/components/ui/card/card-description.svelte">
<script lang="ts">
	import type { WithElementRef } from 'bits-ui';
	import type { HTMLAttributes } from 'svelte/elements';
	import { cn } from '$lib/utils.js';

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLParagraphElement>> = $props(); // Keep as <p> for semantics
</script>

<p
	bind:this={ref}
	data-slot="card-description"
	class={cn(
		// Updated classes using CSS variable
		'text-sm font-[var(--font-base)]',
		className
	)}
	{...restProps}
>
	{@render children?.()}
</p>

<!-- Depends on CSS variable: --font-base -->
</file>

<file path="src/lib/components/ui/card/card-footer.svelte">
<script lang="ts">
	import type { WithElementRef } from 'bits-ui';
	import type { HTMLAttributes } from 'svelte/elements';
	import { cn } from '$lib/utils.js';

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props();
</script>

<div
	bind:this={ref}
	data-slot="card-footer"
	class={cn(
		// Updated classes
		'flex items-center px-6 [&.border-t]:pt-6',
		className
	)}
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="src/lib/components/ui/card/card-header.svelte">
<script lang="ts">
	import type { WithElementRef } from 'bits-ui';
	import type { HTMLAttributes } from 'svelte/elements';
	import { cn } from '$lib/utils.js';

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props();
</script>

<div
	bind:this={ref}
	data-slot="card-header"
	class={cn(
		// Updated classes using grid, container queries, and has selector
		// Ensure Tailwind is configured for container queries (@tailwindcss/container-queries plugin)
		// The `has:` selector requires Tailwind CSS v3.2+
		'@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-[[data-slot=card-action]]:grid-cols-[1fr_auto] [&.border-b]:pb-6',
		className
	)}
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="src/lib/components/ui/card/card-title.svelte">
<script lang="ts">
	import type { WithElementRef } from 'bits-ui';
	import type { HTMLAttributes } from 'svelte/elements';
	import { cn } from '$lib/utils.js';

	let {
		ref = $bindable(null),
		class: className,
		level = 3, // Keep the semantic level prop
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLDivElement>> & {
		level?: 1 | 2 | 3 | 4 | 5 | 6;
	} = $props();
</script>

<div
	role="heading"
	aria-level={level}
	bind:this={ref}
	data-slot="card-title"
	class={cn(
		// Updated classes using CSS variable
		'font-[var(--font-heading)] leading-none',
		className
	)}
	{...restProps}
>
	{@render children?.()}
</div>

<!-- Depends on CSS variable: --font-heading -->
</file>

<file path="src/lib/components/ui/card/card.svelte">
<script lang="ts">
	import type { WithElementRef } from 'bits-ui';
	import type { HTMLAttributes } from 'svelte/elements';
	import { cn } from '$lib/utils.js';

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props();
</script>

<div
	bind:this={ref}
	data-slot="card"
	class={cn(
		// Updated classes using CSS variables
		'flex flex-col gap-6 rounded-[var(--radius-base)] border-2 border-[var(--border)] bg-[var(--background)] py-6 font-[var(--font-base)] text-[var(--foreground)] shadow-[var(--shadow-shadow)]',
		className
	)}
	{...restProps}
>
	{@render children?.()}
</div>

<!--
  Depends on CSS variables:
  --radius-base, --shadow-shadow, --border, --background, --foreground, --font-base
-->
</file>

<file path="src/lib/components/ui/card/index.ts">
import Root from "./card.svelte";
import Content from "./card-content.svelte";
import Description from "./card-description.svelte";
import Footer from "./card-footer.svelte";
import Header from "./card-header.svelte";
import Title from "./card-title.svelte";
import Action from "./card-action.svelte"; // <-- Import the new component

export {
	Root,
	Content,
	Description,
	Footer,
	Header,
	Title,
	Action, // <-- Export the new component
	//
	Root as Card,
	Content as CardContent,
	Description as CardDescription,
	Footer as CardFooter,
	Header as CardHeader,
	Title as CardTitle,
	Action as CardAction, // <-- Export the new component with alias
};
</file>

<file path="src/lib/components/ui/input/index.ts">
import Root from "./input.svelte";

export {
	Root,
	//
	Root as Input,
};
</file>

<file path="src/lib/components/ui/input/input.svelte">
<script lang="ts">
	import type { HTMLInputAttributes, HTMLInputTypeAttribute } from 'svelte/elements';
	import type { WithElementRef } from 'bits-ui';
	import { cn } from '$lib/utils.js';

	type InputType = Exclude<HTMLInputTypeAttribute, 'file'>;

	type Props = WithElementRef<
		Omit<HTMLInputAttributes, 'type'> &
			({ type: 'file'; files?: FileList } | { type?: InputType; files?: undefined })
	>;

	let {
		ref = $bindable(null),
		value = $bindable(),
		type,
		files = $bindable(),
		class: className,
		...restProps
	}: Props = $props();

	// Define the shared classes based on the React component
	// Use outline-none instead of outline-hidden (standard Tailwind)
	const inputClasses = cn(
		'flex h-10 w-full rounded-base border-2 border-border bg-secondary-background selection:bg-main selection:text-main-foreground px-3 py-2 text-sm font-base text-foreground file:border-0 file:bg-transparent file:text-sm file:font-heading placeholder:text-foreground/50 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-black focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
		className // Merge passed className here
	);
</script>

{#if type === 'file'}
	<input
		bind:this={ref}
		data-slot="input"
		class={inputClasses}
		type="file"
		bind:files
		bind:value
		{...restProps}
	/>
{:else}
	<input bind:this={ref} data-slot="input" class={inputClasses} {type} bind:value {...restProps} />
{/if}

<!--
  Reminder: This component now relies on CSS variables defined in your global CSS (src/app.css),
  such as:
  --radius-base, --border, --secondary-background, --main, --main-foreground,
  --font-base, --foreground, --font-heading

  Ensure these are correctly defined for the styles to apply as intended.
-->
</file>

<file path="src/lib/components/ui/separator/index.ts">
import Root from "./separator.svelte";

export {
	Root,
	//
	Root as Separator,
};
</file>

<file path="src/lib/components/ui/sheet/index.ts">
import { Dialog as SheetPrimitive } from "bits-ui";
import Overlay from "./sheet-overlay.svelte";
import Content from "./sheet-content.svelte";
import Header from "./sheet-header.svelte";
import Footer from "./sheet-footer.svelte";
import Title from "./sheet-title.svelte";
import Description from "./sheet-description.svelte";

const Root = SheetPrimitive.Root;
const Close = SheetPrimitive.Close;
const Trigger = SheetPrimitive.Trigger;
const Portal = SheetPrimitive.Portal;

export {
	Root,
	Close,
	Trigger,
	Portal,
	Overlay,
	Content,
	Header,
	Footer,
	Title,
	Description,
	//
	Root as Sheet,
	Close as SheetClose,
	Trigger as SheetTrigger,
	Portal as SheetPortal,
	Overlay as SheetOverlay,
	Content as SheetContent,
	Header as SheetHeader,
	Footer as SheetFooter,
	Title as SheetTitle,
	Description as SheetDescription,
};
</file>

<file path="src/lib/components/ui/sheet/sheet-content.svelte">
<script lang="ts" module>
	import { tv, type VariantProps } from "tailwind-variants";
	export const sheetVariants = tv({
		base: "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 gap-4 p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
		variants: {
			side: {
				top: "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 border-b",
				bottom: "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 border-t",
				left: "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
				right: "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
			},
		},
		defaultVariants: {
			side: "right",
		},
	});

	export type Side = VariantProps<typeof sheetVariants>["side"];
</script>

<script lang="ts">
	import { Dialog as SheetPrimitive, type WithoutChildrenOrChild } from "bits-ui";
	import X from "@lucide/svelte/icons/x";
	import type { Snippet } from "svelte";
	import SheetOverlay from "./sheet-overlay.svelte";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		side = "right",
		portalProps,
		children,
		...restProps
	}: WithoutChildrenOrChild<SheetPrimitive.ContentProps> & {
		portalProps?: SheetPrimitive.PortalProps;
		side?: Side;
		children: Snippet;
	} = $props();
</script>

<SheetPrimitive.Portal {...portalProps}>
	<SheetOverlay />
	<SheetPrimitive.Content bind:ref class={cn(sheetVariants({ side }), className)} {...restProps}>
		{@render children?.()}
		<SheetPrimitive.Close
			class="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute right-4 top-4 rounded-sm opacity-70 transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:pointer-events-none"
		>
			<X class="size-4" />
			<span class="sr-only">Close</span>
		</SheetPrimitive.Close>
	</SheetPrimitive.Content>
</SheetPrimitive.Portal>
</file>

<file path="src/lib/components/ui/sheet/sheet-description.svelte">
<script lang="ts">
	import { Dialog as SheetPrimitive } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: SheetPrimitive.DescriptionProps = $props();
</script>

<SheetPrimitive.Description
	bind:ref
	class={cn("text-muted-foreground text-sm", className)}
	{...restProps}
/>
</file>

<file path="src/lib/components/ui/sheet/sheet-footer.svelte">
<script lang="ts">
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props();
</script>

<div
	bind:this={ref}
	class={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="src/lib/components/ui/sheet/sheet-header.svelte">
<script lang="ts">
	import type { HTMLAttributes } from "svelte/elements";
	import type { WithElementRef } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props();
</script>

<div
	bind:this={ref}
	class={cn("flex flex-col space-y-2 text-center sm:text-left", className)}
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="src/lib/components/ui/sheet/sheet-overlay.svelte">
<script lang="ts">
	import { Dialog as SheetPrimitive } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: SheetPrimitive.OverlayProps = $props();

	export { className as class };
</script>

<SheetPrimitive.Overlay
	bind:ref
	class={cn(
		"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0  fixed inset-0 z-50 bg-black/80",
		className
	)}
	{...restProps}
/>
</file>

<file path="src/lib/components/ui/sheet/sheet-title.svelte">
<script lang="ts">
	import { Dialog as SheetPrimitive } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: SheetPrimitive.TitleProps = $props();
</script>

<SheetPrimitive.Title
	bind:ref
	class={cn("text-foreground text-lg font-semibold", className)}
	{...restProps}
/>
</file>

<file path="src/lib/stores/themeStore.ts">
// src/lib/stores/themeStore.ts
import { writable, type Writable } from 'svelte/store';
import { applyThemeClass, getPreferredTheme, persistTheme } from '$lib/themeUtils';

interface ThemeStore {
    isDark: boolean;
    mounted: boolean; // To track if client-side logic can run
}

// Create the writable store
const { subscribe, set, update }: Writable<ThemeStore> = writable({
    isDark: false, // Initial default, will be updated on mount
    mounted: false
});

// Function to initialize the theme based on preference/storage
function initializeTheme(): void {
    if (typeof window !== 'undefined') {
        const preferredTheme = getPreferredTheme();
        const newIsDark = preferredTheme === 'dark';
        update((store) => ({ ...store, isDark: newIsDark, mounted: true }));
        applyThemeClass(newIsDark); // Apply initial theme class
        console.log('Theme initialized:', preferredTheme);
    }
}

// Function to toggle the theme
function toggleTheme(): void {
    update((store) => {
        const newIsDark = !store.isDark;
        persistTheme(newIsDark ? 'dark' : 'light');
        applyThemeClass(newIsDark);
        console.log('Theme toggled to:', newIsDark ? 'dark' : 'light');
        return { ...store, isDark: newIsDark };
    });
}

// Export the store and actions
export const themeStore = {
    subscribe,
    initialize: initializeTheme,
    toggle: toggleTheme
    // Note: We don't export set or update directly to control state changes
};
</file>

<file path="src/lib/index.ts">
// place files you want to import through the `$lib` alias in this folder.
</file>

<file path="src/lib/themeUtils.ts">
// src/lib/themeUtils.ts
/**
 * Applies the theme class to the document root.
 * Handles server-side rendering safety.
 * @param isDark - Whether the dark theme should be applied.
 */
export function applyThemeClass(isDark: boolean): void {
    if (typeof document !== 'undefined') {
        const root = document.documentElement;
        if (isDark) {
            root.classList.add('dark');
        } else {
            root.classList.remove('dark');
        }
    }
}

/**
 * Gets the preferred theme based on localStorage or system preference.
 * Handles server-side rendering safety.
 * @returns 'dark' or 'light'
 */
export function getPreferredTheme(): 'dark' | 'light' {
    if (typeof window !== 'undefined') {
        const storedTheme = localStorage.getItem('theme');
        // Explicitly check for 'dark' or 'light' to avoid invalid values
        if (storedTheme === 'dark' || storedTheme === 'light') {
            return storedTheme;
        }
        // Check system preference only if no valid theme is stored
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        return prefersDark ? 'dark' : 'light';
    }
    // Return a default theme for SSR or environments without window
    // Consider if 'light' or 'dark' makes more sense as your default fallback
    return 'light';
}

/**
 * Persists the chosen theme to localStorage.
 * Handles server-side rendering safety.
 * @param theme - 'dark' or 'light'
 */
export function persistTheme(theme: 'dark' | 'light'): void {
    if (typeof window !== 'undefined') {
        localStorage.setItem('theme', theme);
    }
}
</file>

<file path="src/routes/blog/[slug]/+page.server.ts">
// src/routes/blog/[slug]/+page.server.ts
import { getAllPosts, getPostBySlug, type BlogPost } from "$lib/server/blogPosts";
import { error } from "@sveltejs/kit";

export interface PageData {
    post: BlogPost;
}

// The `params` object contains the dynamic route parameters (e.g., { slug: 'first-blog-post' })
export function load({ params }): PageData {
    const post = getPostBySlug(params.slug);

    if (!post) {
        // If the post isn't found by slug, throw a 404 error
        throw error(404, "Blog post not found");
    }

    return {
        post: post, // Pass the specific post data to the page
    };
}

export function entries() {
    const posts = getAllPosts();
    // Map the posts array to an array of objects, each with a 'slug' property
    return posts.map((post) => ({ slug: post.slug }));
    // Example output: [ { slug: 'first-blog-post' }, { slug: 'second-blog-post' }, ... ]
}
export const prerender = true;
</file>

<file path="src/routes/blog/[slug]/+page.svelte">
<!-- src/routes/blog/[slug]/+page.svelte -->
<script lang="ts">
	import Header from '$lib/frontpage/Header.svelte';
	import Footer from '$lib/frontpage/Footer.svelte';
	import { Badge } from '$lib/components/ui/badge';
	import { onMount } from 'svelte';
	import type { PageData } from './+page.server.js';

	// --- Markdown Rendering ---
	import { marked } from 'marked'; // For parsing Markdown ONLY

	// --- Theme Toggle State and Logic ---
	let isDark = $state(false);
	let mounted = $state(false);

	onMount(() => {
		mounted = true;
		const storedTheme = localStorage.getItem('theme');
		const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
		if (storedTheme) {
			isDark = storedTheme === 'dark';
		} else {
			isDark = prefersDark;
		}
		applyTheme();
	});

	function toggleTheme() {
		isDark = !isDark;
		localStorage.setItem('theme', isDark ? 'dark' : 'light');
		applyTheme();
	}

	function applyTheme() {
		if (typeof document !== 'undefined') {
			if (isDark) {
				document.documentElement.classList.add('dark');
			} else {
				document.documentElement.classList.remove('dark');
			}
		}
	}
	// --- End Theme Logic ---

	let { data }: { data: PageData } = $props();
	const post = data.post;

	// Reactive statement to parse Markdown when post.content is available
	// WARNING: No sanitization! Only use if content is 100% trusted.
	let renderedHtml = $state(''); // Use $state for reactivity

	$effect(() => {
		if (post?.content) {
			// Directly parse Markdown to HTML. Assumes content is safe.
			renderedHtml = marked.parse(post.content) as string;
		} else {
			renderedHtml = ''; // Handle cases where content is initially null/undefined
		}
	});
</script>

<div class="flex min-h-screen flex-col bg-background text-foreground">
	<Header {mounted} {isDark} {toggleTheme} />

	<main class="flex-grow">
		<article class="container mx-auto items-center p-8">
			<header class="mb-8 border-b-2 border-border pb-6">
				<h1 class="font-heading mb-3 text-4xl md:text-5xl">{post.name}</h1>
				<p class="mb-4 text-lg text-foreground/80">
					Published on: {post.date.toLocaleDateString('en-US', {
						year: 'numeric',
						month: 'long',
						day: 'numeric'
					})}
				</p>
				{#if post.tags.length > 0}
					<div class="flex flex-wrap gap-2">
						{#each post.tags as tag}
							<Badge variant="neutral">{tag}</Badge>
						{/each}
					</div>
				{/if}
				{#if post.image}
					<img
						src={post.image}
						alt="Featured image for {post.name}"
						class="shadow-shadow mt-6 w-full rounded border-2 border-border object-cover"
						width="800"
						height="400"
					/>
				{/if}
			</header>

			<!-- Render the UNSANITIZED HTML generated from Markdown -->
			<!-- Add prose styles for better Markdown rendering -->
			<div class="prose prose-neutral max-w-none dark:prose-invert">
				{@html renderedHtml}
			</div>
		</article>
	</main>

	<Footer />
</div>
</file>

<file path="src/routes/blog/+page.server.ts">
// src/routes/blog/+page.server.ts
import { getAllPosts, type BlogPost } from "$lib/server/blogPosts";

export interface PageData {
    posts: BlogPost[];
}

export function load(): PageData {
    const posts = getAllPosts();
    return {
        posts: posts, // Pass the loaded posts to the page
    };
}
</file>

<file path="src/routes/linktree/+page.svelte">
<script lang="ts">
	import Header from '$lib/frontpage/Header.svelte';
	import { Button } from '$lib/components/ui/button';
	import Icon from '@iconify/svelte'; // Import Iconify component
	import { Avatar, AvatarFallback, AvatarImage } from '$lib/components/ui/avatar';

	// Define the links for the Linktree, using Iconify strings for icons
	const links = [
		{
			href: '/blog', // Assuming this is an internal link
			label: 'Blog',
			icon: 'mdi:post-outline',
			variant: 'neutral' as const
		},
		{
			href: 'https://github.com/prudhviboggavarapu',
			label: 'GitHub',
			icon: 'simple-icons:github',
			variant: 'default' as const
		},
		// {
		// 	href: 'https://www.linkedin.com/in/prudhviboggavarapu/',
		// 	label: 'LinkedIn',
		// 	icon: 'simple-icons:linkedin',
		// 	variant: 'default' as const
		// },
        {
            href: 'https://www.youtube.com/@LetsLearnThingsLive', // Added YouTube link
            label: 'YouTube',
            icon: 'simple-icons:youtube', // Added YouTube icon
            variant: 'default' as const
        },
        {
            href: 'https://twitch.tv/letslearnthingslive',
            label: 'Twitch',
            icon: 'simple-icons:twitch',
            variant: 'default' as const
        },
		{
			href: 'https://bsky.app/profile/thethornyrose.bsky.social',
			label: 'Bluesky',
			icon: 'simple-icons:bluesky',
			variant: 'default' as const
		},
		{
			href: 'https://www.snapchat.com/add/soulcrusher6942?share_id=mO4CkjwaURo&locale=en-US',
			label: 'Snapchat',
			icon: 'simple-icons:snapchat',
			variant: 'default' as const
		},
		{
			href: 'https://wa.me/qr/LJWL6RUQD2TJE1',
			label: 'WhatsApp',
			icon: 'simple-icons:whatsapp',
			variant: 'default' as const
		},
		{
			href: 'mailto:codingpabs@gmail.com',
			label: 'Email Me',
			icon: 'mdi:email-outline',
			variant: 'neutral' as const
		},
		{
			// --- IMPORTANT: Replace with the ACTUAL URL to your vCard file ---
			href: '/contact.vcf', // Placeholder URL - you need to host the .vcf file
			label: 'Add to Contacts (vCard)',
			icon: 'mdi:card-account-details-outline',
			variant: 'neutral' as const
		}
	];
</script>

<div class="flex min-h-screen flex-col bg-background text-foreground">
	<Header />

	<!-- Main Content Area: Centered horizontally, starts near the top -->
	<main class="flex flex-grow items-start justify-center pb-12 pt-12">
		<div class="container mx-auto flex max-w-md flex-col items-center p-4">
			<!-- Profile Avatar and Name -->
			<Avatar class="shadow-shadow mb-4 size-24 border-4 border-border">
				<!-- Replace with your actual image URL -->
				<AvatarImage src="/placeholder-avatar.jpg" alt="Karma Jade Rose" />
				<AvatarFallback class="text-4xl font-bold">KJ</AvatarFallback>
			</Avatar>
			<h1 class="font-heading mb-2 text-3xl">Karma Jade Rose</h1>
			<p class="font-base mb-8 text-center text-foreground/80">
				Rust & Python Developer | Web Dev Enthusiast | Robotics Tinkerer
			</p>

			<!-- Links Section -->
			<div class="flex w-full flex-col space-y-4">
				{#each links as link (link.href)}
					{#if link.label === 'Add to Contacts (vCard)'}
						<!-- Special handling for vCard download link -->
						<a
							href={link.href}
							class="w-full no-underline"
							download="KarmaJadeRose_Contact.vcf"
							target="_blank"
							rel="noopener noreferrer"
						>
							<Button variant={link.variant} size="lg" class="w-full justify-center text-lg">
								{#if link.icon}
									<Icon icon={link.icon} class="mr-2 size-6" />
								{/if}
								{link.label}
							</Button>
						</a>
					{:else}
						<!-- Standard link handling -->
						<a
							href={link.href}
							target="_blank"
							rel="noopener noreferrer"
							class="w-full no-underline"
						>
							<Button variant={link.variant} size="lg" class="w-full justify-center text-lg">
								{#if link.icon}
									<Icon icon={link.icon} class="mr-2 size-6" />
								{/if}
								{link.label}
							</Button>
						</a>
					{/if}
				{/each}
			</div>
		</div>
	</main>
</div>
</file>

<file path="src/routes/tags/[tag]/+page.server.ts">
// src/routes/tags/[tag]/+page.server.ts
import { getAllPosts, type BlogPost } from '$lib/server/blogPosts';
import { error } from '@sveltejs/kit';

export interface PageData {
    /** The tag name requested from the URL. */
    tagName: string;
    /** An array of blog posts that include the requested tag. */
    filteredPosts: BlogPost[];
}

export function load({ params }): PageData {
    const requestedTag = params.tag; // Get tag from URL (already decoded by SvelteKit)
    if (!requestedTag) {
        throw error(400, 'Tag parameter is missing');
    }

    const allPosts = getAllPosts();

    // Filter posts: keep only those whose tags array includes the requested tag.
    // Consider case-insensitivity if your tags might vary in casing:
    // const filteredPosts = allPosts.filter(post =>
    //     post.tags?.some(t => t.toLowerCase() === requestedTag.toLowerCase())
    // );
    const filteredPosts = allPosts.filter((post) =>
        post.tags?.includes(requestedTag)
    );

    console.log(
        `Found ${filteredPosts.length} posts for tag: ${requestedTag}`
    ); // Optional logging

    // Optional: Could throw 404 if no posts found, but showing an empty list might be better UX.
    // if (filteredPosts.length === 0) {
    //     throw error(404, `No posts found for tag: ${requestedTag}`);
    // }

    return {
        tagName: requestedTag,
        filteredPosts: filteredPosts
    };
}

// --- Prerendering Support ---
export function entries() {
    const posts = getAllPosts();
    const allTags: string[] = [];
    posts.forEach((post) => {
        if (post.tags && Array.isArray(post.tags)) {
            allTags.push(...post.tags);
        }
    });
    const uniqueTags = [...new Set(allTags)];

    // Return an array of objects mapping the unique tags to the `tag` parameter
    return uniqueTags.map((tag) => ({ tag: encodeURIComponent(tag) }));
    // Example output: [ { tag: 'blog' }, { tag: 'first' }, { tag: 'second' }, ... ]
}

export const prerender = true; // Enable prerendering for these tag pages
</file>

<file path="src/routes/tags/[tag]/+page.svelte">
<!-- src/routes/tags/[tag]/+page.svelte -->
<script lang="ts">
	import Header from '$lib/frontpage/Header.svelte';
	import Footer from '$lib/frontpage/Footer.svelte';
	import { Badge } from '$lib/components/ui/badge'; // Re-import Badge if needed
	import { formatDisplayDate } from '$lib/utils'; // Import date formatter
	import type { PageData } from './+page.server.js';

	let { data }: { data: PageData } = $props();
	const { tagName, filteredPosts } = data;
</script>

<div class="flex min-h-screen flex-col bg-background text-foreground">
	<Header />

	<!-- Main Content Area -->
	<main class="flex-grow">
		<div class="container mx-auto p-8">
			<h1 class="font-heading mb-6 border-b-2 border-border pb-4 text-4xl">
				Posts tagged with: <span class="text-main">{tagName}</span>
			</h1>

			<!-- Check if there are posts for this tag -->
			{#if filteredPosts && filteredPosts.length > 0}
				<div class="space-y-8">
					<!-- Iterate over the filtered posts -->
					{#each filteredPosts as post (post.slug)}
						<!-- Replicate the styling from /blog/+page.svelte -->
						<article
							class="shadow-shadow rounded-[var(--radius-base)] border-2 border-border p-6 transition-transform hover:-translate-y-1"
						>
							<h2 class="font-heading mb-2 text-2xl">{post.name}</h2>
							<p class="mb-4 text-sm text-foreground/80">
								Published on: {formatDisplayDate(post.date)}
							</p>

							<!-- Optionally display other tags for context -->
							{#if post.tags && post.tags.length > 0}
								<div class="mb-4 flex flex-wrap gap-2">
									{#each post.tags as postTag}
										<Badge variant={postTag === tagName ? 'default' : 'neutral'} class="text-xs">
											{postTag}
										</Badge>
									{/each}
								</div>
							{/if}

							{#if post.blurb}
								<p class="font-base mb-4">{post.blurb}</p>
							{/if}
							<a href="/blog/{post.slug}" class="text-main inline-block font-bold hover:underline">
								Read More &rarr;
							</a>
						</article>
					{/each}
				</div>
			{:else}
				<p class="font-base text-center italic">
					No blog posts found with the tag "{tagName}".
				</p>
			{/if}
		</div>
	</main>

	<Footer />
</div>
</file>

<file path="src/routes/tags/+page.server.ts">
// src/routes/tags/+page.server.ts
import { getAllPosts } from '$lib/server/blogPosts';
import type { BlogPost } from '$lib/server/blogPosts'; // Optional: if you need the type

export interface PageData {
    /** An alphabetically sorted array of unique tags from all blog posts. */
    uniqueTags: string[];
}

export function load(): PageData {
    const posts = getAllPosts();
    const allTags: string[] = [];

    // Collect all tags from all posts
    posts.forEach((post) => {
        if (post.tags && Array.isArray(post.tags)) {
            allTags.push(...post.tags);
        }
    });

    // Get unique tags using a Set and sort them alphabetically
    const uniqueTags = [...new Set(allTags)].sort((a, b) =>
        a.localeCompare(b)
    );

    console.log(`Found ${uniqueTags.length} unique tags.`); // Optional logging

    return {
        uniqueTags: uniqueTags
    };
}

// Prerender this page as the tag list is determined at build time
export const prerender = true;
</file>

<file path="src/routes/tags/+page.svelte">
<!-- src/routes/tags/+page.svelte -->
<script lang="ts">
	import { onMount } from 'svelte';
	import Fuse from 'fuse.js'; // Import the fuzzy search library
	import Header from '$lib/blog_stuff/Header.svelte';
	import Footer from '$lib/blog_stuff/Footer.svelte';
	import { Input } from '$lib/components/ui/input'; // Assuming you have an Input component
	import { Badge } from '$lib/components/ui/badge';
	import type { PageData } from './+page.server.js';

	// --- Get Page Data ---
	let { data }: { data: PageData } = $props();
	const allUniqueTags = data.uniqueTags || []; // Ensure it's an array

	// --- State for Search ---
	let searchTerm = $state('');
	let filteredTags = $state([...allUniqueTags]); // Start with all tags
	let fuse: Fuse<string>; // Fuse instance, initialized in onMount

	// --- Initialize Fuse.js on Mount ---
	onMount(() => {
		const options: Fuse.IFuseOptions<string> = {
			threshold: 0.4, // Adjust for sensitivity
			minMatchCharLength: 1
		};
		fuse = new Fuse(allUniqueTags, options);
	});

	// --- Reactive Effect for Filtering ---
	$effect(() => {
		if (!fuse) return; // Don't run if Fuse isn't initialized yet

		const term = searchTerm.trim();
		if (term === '') {
			filteredTags = [...allUniqueTags];
		} else {
			const results = fuse.search(term);
			filteredTags = results.map((result) => result.item);
		}
	});
</script>

<div class="flex min-h-screen flex-col bg-background text-foreground">
	<Header />

	<!-- Main Content Area -->
	<main class="flex-grow">
		<div class="container mx-auto p-8">
			<h1 class="font-heading mb-6 border-b-2 border-border pb-4 text-4xl">Search Tags</h1>

			<div class="mb-8">
				<Input
					type="search"
					placeholder="Start typing to fuzzy search tags..."
					bind:value={searchTerm}
					class="w-full max-w-lg"
					aria-label="Search blog tags"
				/>
			</div>

			{#if filteredTags.length > 0}
				<div class="flex flex-wrap gap-3">
					{#each filteredTags as tag (tag)}
						<!-- Make the tag a link -->
						<a
							href="/tags/{encodeURIComponent(tag)}"
							class="no-underline transition-transform hover:-translate-y-0.5"
							aria-label="View posts tagged with {tag}"
						>
							<Badge variant="neutral" class="cursor-pointer text-base">
								{tag}
							</Badge>
						</a>
					{/each}
				</div>
			{:else if searchTerm.trim() !== ''}
				<p class="font-base text-center italic text-foreground/80">
					No tags found matching "{searchTerm}".
				</p>
			{:else}
				<p class="font-base text-center italic text-foreground/80">No tags available.</p>
			{/if}
		</div>
	</main>

	<Footer />
</div>
</file>

<file path=".npmrc">
engine-strict=true
</file>

<file path="components.json">
{
	"$schema": "https://next.shadcn-svelte.com/schema.json",
	"style": "default",
	"tailwind": {
		"config": "tailwind.config.ts",
		"css": "src/app.css",
		"baseColor": "slate"
	},
	"aliases": {
		"components": "$lib/components",
		"utils": "$lib/utils",
		"ui": "$lib/components/ui",
		"hooks": "$lib/hooks"
	},
	"typescript": true,
	"registry": "https://next.shadcn-svelte.com/registry"
}
</file>

<file path="firefoxtemp.sh">
#!/bin/bash

# Create a temporary directory for the profile
# mktemp creates a unique temporary directory securely
TMP_PROFILE_DIR=$(mktemp -d -t firefox-temp-profile.XXXXXXXXXX)

# Ensure the directory is cleaned up even if the script is interrupted
trap 'rm -rf "$TMP_PROFILE_DIR"' EXIT

echo "Launching Firefox with temporary profile: $TMP_PROFILE_DIR"

# Launch Firefox
# -no-remote: Ensures this runs as a separate instance, not connecting to an existing one.
# -profile: Specifies the directory to use for the profile.
# "$@": Passes any additional arguments you give the script to Firefox.
firefox -no-remote -profile "$TMP_PROFILE_DIR" "$@"

echo "Firefox closed. Temporary profile will be removed."

# The trap command handles the cleanup automatically on exit.
exit 0
</file>

<file path="style.md">
# Colors

## Fractal Design System by Snowball.xyz

## Palette

### Primary

- `#FF8ACD` (Tone 50)

**â Use for:**

- Display covers & primary marketing contents backgrounds
- Headers backgrounds
- Primary elements backgrounds
- Primary illustrations decoration
- Primary Active elements with Secondary Color background

**ð« Don't:**

- Use for text colors on light backgrounds
- Use for icons colors on light backgrounds
- Use for strokes nor separators

---

### Secondary

- `#000000` (Tone 0)

**â Use for:**

- Texts color on light & colored backgrounds
- Footers & Left navigation backgrounds
- Strokes & Brutal shadows styles
- Secondary buttons backgrounds
- Illustrations & default icons on light backgrounds

**ð« Don't:**

- Body background color
- Cards backgrounds

---

### Decorative Pink

| Hex Code  | Tone |
| --------- | ---- |
| `#FFC6E7` | 70   |
| `#FFE2F3` | 90   |

---

### Decorative Purple

| Hex Code  | Tone |
| --------- | ---- |
| `#B37DFF` | 50   |
| `#D9BEFF` | 70   |
| `#F0E5FF` | 90   |

---

### Decorative Blue

| Hex Code  | Tone |
| --------- | ---- |
| `#8AF1FF` | 50   |
| `#B3F6FF` | 70   |
| `#D6FAFF` | 90   |

---

### Decorative Yellow

| Hex Code  | Tone |
| --------- | ---- |
| `#FFE959` | 50   |
| `#FFF29B` | 70   |
| `#FFF8C5` | 90   |

---

### Decorative Green

| Hex Code  | Tone |
| --------- | ---- |
| `#76F7AE` | 50   |
| `#ADFACE` | 70   |
| `#CFFCE3` | 90   |

_(Usage rules below likely associated with Tones 70 & 90)_

**â Use for:**

- Illustrations decorations
- Tertiary cards backgrounds
- Lower page hierarchy backgrounds
- Low interactions hierarchy backgrounds
- Labels/cartouches backgrounds
- Listed items:
  - Drop downs Hovers
  - Icons containers backgrounds
  - Checkboxes checked status

**ð« Don't:**

- Text colors
- Stokes, borders nor separators
- Icons
- Buttons backgrounds

---

### Feedback Danger

| Hex Code  | Tone |
| --------- | ---- |
| `#FF5454` | 50   |
| `#FFD6D6` | 90   |

---

### Feedback Warning

| Hex Code  | Tone |
| --------- | ---- |
| `#FF9F69` | 50   |
| `#FFEAD1` | 90   |

---

### Feedback Success

| Hex Code  | Tone |
| --------- | ---- |
| `#3CD39D` | 50   |

**â Use for: Feedback system only**

---

### Separator

- `#E2E2E2` (Tone 90)
  **â Use for: separator strokes only**

---

### Body

- `#FFFBEE` (Tone 90)
  **â Use for: body background only**

---

### White

- `#FFFFFF` (Tone 100)
  **â Use for:**
- Primary cards backgrounds
- Text colors on dark & backgrounds
- Icons colors on dark backgrounds
- Strokes, borders & brutal shadows on dark backgrounds

---

## Palette Tone

(Visual representation: 0 [Black] <-----> 100 [White])

The 0 tone is always 100% black, the darkest tone in the range; the 100 tone is always 100% white, the lightest tone in the range.
</file>

<file path="src/lib/components/icons/LogoPlaceholder.svelte">
<!-- src/lib/components/icons/LogoK.svelte -->
<svg width="50" height="50" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
	<!-- Vertical Stem -->
	<path d="M 25 10 L 25 90" stroke="currentColor" stroke-width="12" stroke-linecap="round" />
	<!-- Upper Diagonal Arm -->
	<path d="M 25 50 L 75 10" stroke="currentColor" stroke-width="12" stroke-linecap="round" />
	<!-- Lower Diagonal Arm -->
	<path d="M 25 50 L 75 90" stroke="currentColor" stroke-width="12" stroke-linecap="round" />
</svg>
</file>

<file path="src/lib/components/ui/separator/separator.svelte">
<script lang="ts">
	import { Separator as SeparatorPrimitive } from 'bits-ui';
	import { cn } from '$lib/utils.js';

	let {
		ref = $bindable(null),
		class: className,
		orientation = 'horizontal',
		// Add a prop for thickness, defaulting to 8px (h-2 in Tailwind)
		thickness = 'h-1', // Default thickness for horizontal
		...restProps
	}: SeparatorPrimitive.RootProps & { thickness?: string } = $props();

	// Determine vertical thickness based on horizontal (e.g., w-2 if h-2)
	// Or keep it fixed if preferred
	const verticalThickness = thickness.replace('h-', 'w-'); // Simple replacement, adjust if needed
</script>

<SeparatorPrimitive.Root
	bind:ref
	class={cn(
		// Change background to black
		'shrink-0 ', // Use foreground color for the separator's background
		// Use the thickness prop for height/width
		orientation === 'horizontal'
			? `${thickness} w-full` // e.g., h-2 w-full
			: `min-h-full ${verticalThickness}`, // e.g., min-h-full w-2
		className
	)}
	style="background-color: var(--foreground);"
	{orientation}
	{...restProps}
/>
</file>

<file path="src/lib/server/blogPosts.ts">
// src/lib/server/blogPosts.ts
import toml from "toml";
import { error } from "@sveltejs/kit";

// Define the structure of your article data based on the TOML
// Note: Your TOML uses [[title]], which creates an array. We'll assume
// you want the first element of that array for the main post details.
interface TomlArticleData {
	title: {
		name: string;
		slug: string;
		blurb: string;
		tags: string[];
		date: string; // Keep as string initially for sorting
		image?: string; // Optional image
		content: string;
	}[]; // Array due to [[title]]
}

export interface BlogPost {
	name: string;
	slug: string;
	blurb: string;
	tags: string[];
	date: Date; // Convert to Date object for easier use
	image?: string;
	content: string;
	// filePath is removed as it's no longer needed at runtime
}

// --- Build-Time Data Loading using import.meta.glob ---
// Use Vite's import.meta.glob to find all .toml files in src/articles
// `eager: true` imports the modules immediately during build
// `as: 'raw'` imports the raw string content of the files
const rawTomlFiles = import.meta.glob("/src/articles/*.toml", {
	eager: true,
	as: "raw",
});
// Example rawTomlFiles structure at build time:
// {
//   '/src/articles/first_blog.toml': '[[title]]\nname = "First..."',
//   '/src/articles/second_blog.toml': '[[title]]\nname = "Second..."',
//   ...
// }
// -------------------------------------------------------

let allPosts: BlogPost[] | null = null; // Cache the posts

/**
 * Parses the TOML content fetched at build time, sorts the posts by date,
 * caches the result, and returns the array.
 * Subsequent calls return the cached, sorted array directly.
 * This function NO LONGER uses node:fs or node:path at runtime.
 */
export function getAllPosts(): BlogPost[] {
	// If posts are already processed and cached, return the cached version.
	if (allPosts) {
		return allPosts;
	}

	console.log("Processing build-time TOML data..."); // Log processing
	const posts: BlogPost[] = [];

	// Iterate over the raw TOML strings imported by import.meta.glob
	for (const filePath in rawTomlFiles) {
		const fileContent = rawTomlFiles[filePath];
		// Extract a simple filename for logging purposes
		const fileName = filePath.split("/").pop() || filePath;

		try {
			const parsedData = toml.parse(fileContent) as TomlArticleData;

			// Validate the structure
			if (
				!parsedData.title ||
				!Array.isArray(parsedData.title) ||
				parsedData.title.length === 0
			) {
				console.warn(
					`Skipping ${fileName}: Missing or invalid [[title]] array.`
				);
				continue;
			}

			// Assume the first [[title]] entry contains the main post data
			const postData = parsedData.title[0];

			// Validate required fields
			if (
				!postData.slug ||
				!postData.name ||
				!postData.date ||
				!postData.content
			) {
				console.warn(
					`Skipping ${fileName}: Missing required fields (slug, name, date, content) in title object.`
				);
				continue;
			}

			// Create the BlogPost object, converting date string to Date object
			posts.push({
				name: postData.name,
				slug: postData.slug,
				blurb: postData.blurb || "", // Provide default empty string if missing
				tags: postData.tags || [], // Provide default empty array if missing
				date: new Date(postData.date), // Convert string to Date here
				image: postData.image, // Will be undefined if missing
				content: postData.content,
				// filePath is removed
			});
		} catch (parseError: any) {
			// Log the error with the specific file that failed
			console.error(`Error parsing TOML from ${fileName}:`, parseError);
			// Depending on requirements, you might want to stop the build here
			// by re-throwing the error, potentially wrapped in a SvelteKit error.
			// For now, we just log it and continue with other posts.
			// throw error(500, `Failed to parse blog post: ${fileName}. Error: ${parseError.message}`);
		}
	}

	// Sort the newly processed posts by date (newest first) *before* caching.
	// This uses the Date objects directly.
	posts.sort((a, b) => b.date.getTime() - a.date.getTime());
	console.log(`Processed and sorted ${posts.length} posts from build-time data.`);

	// Cache the processed and sorted result.
	allPosts = posts;
	return allPosts;
}

/**
 * Finds and returns a single blog post by its slug.
 * Uses the cached list generated by getAllPosts (which now uses build-time data).
 *
 * @param slug The slug of the post to find.
 * @returns The found BlogPost or null if not found.
 */
export function getPostBySlug(slug: string): BlogPost | null {
	const posts = getAllPosts(); // Ensure posts are processed and cached
	const post = posts.find((p) => p.slug === slug);
	return post || null; // Return the found post or null if not found
}
</file>

<file path="src/lib/utils.ts">
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";
import { marked } from 'marked';
// Optional: Add sanitizer later if needed
// import DOMPurify from 'dompurify';

export function cn(...inputs: ClassValue[]) {
	return twMerge(clsx(inputs));
}

/**
 * Formats a date object into a standard string format for display (e.g., "October 5, 2024").
 * @param date - The Date object, or a string/number that can be parsed into a Date.
 * @returns The formatted date string, or "Invalid Date" if input is invalid.
 */
export function formatDisplayDate(date: Date | string | number): string {
    // Attempt to create a Date object
    const dateObj = new Date(date);

    // Check if the Date object is valid
    if (isNaN(dateObj.getTime())) {
        console.warn("formatDisplayDate received invalid date input:", date);
        return "Invalid Date";
    }

    // Format the valid date
    return dateObj.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
}


/**
 * Parses a Markdown string into HTML.
 * WARNING: Does not sanitize by default. Add sanitization if content is not trusted.
 * @param markdownContent - The Markdown string.
 * @returns The parsed HTML string, or an empty string if input is null/undefined.
 */
export function parseMarkdown(markdownContent: string | null | undefined): string {
    if (!markdownContent) {
        return '';
    }
    // Basic parsing:
    const rawHtml = marked.parse(markdownContent) as string;

    // TODO: Add Sanitization if needed!
    // Example using DOMPurify (requires installation: pnpm add dompurify @types/dompurify)
    // Make sure DOMPurify runs only in the browser context
    // if (typeof window !== 'undefined') {
    //     return DOMPurify.sanitize(rawHtml);
    // }
    // Return raw HTML for SSR or if no sanitization needed (use with caution)
    return rawHtml;
}
</file>

<file path="src/app.d.ts">
// See https://svelte.dev/docs/kit/types#app.d.ts
// for information about these interfaces
declare global {
	namespace App {
		// interface Error {}
		// interface Locals {}
		// interface PageData {}
		// interface PageState {}
		// interface Platform {}
	}
}

export {};
</file>

<file path="src/app.html">
<!doctype html>
<!-- Set lang based on your needs -->
<html lang="en">
    <head>
        <meta charset="utf-8"/>
        <link rel="icon" href="%sveltekit.assets%/favicon.png"/>
        <meta
        name="viewport" content="width=device-width, initial-scale=1"/>

        <!-- === START: Theme Initialization Script === -->
        <script>
            (function () {
                try {
                    const storedTheme = localStorage.getItem('theme');
                    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                    // Determine theme: stored preference > OS preference > default (light)
                    const theme = storedTheme === 'dark' || (! storedTheme && prefersDark) ? 'dark' : 'light';

                    if (theme === 'dark') {
                        document.documentElement.classList.add('dark');
                        // Optional: Set inline background color if needed for absolute earliest paint
                        // document.documentElement.style.backgroundColor = '#241933'; // Your dark bg
                    } else { // Ensure dark class is removed if light is preferred/stored
                        document.documentElement.classList.remove('dark');
                        // Optional: Set light background if needed
                        // document.documentElement.style.backgroundColor = '#F0E5FF'; // Your light bg
                    }
                } catch (e) { // Ignore errors (e.g., localStorage access denied)
                    console.error('Error applying initial theme:', e);
                }
            })();
        </script>
        <!-- === END: Theme Initialization Script === -->

        %sveltekit.head%
    </head>
    <body data-sveltekit-preload-data="hover">
        <div style="display: contents">%sveltekit.body%</div>
    </body>
</html>
</file>

<file path=".prettierrc">
{
	"useTabs": true,
	"singleQuote": true,
	"trailingComma": "none",
	"printWidth": 100,
	"plugins": ["prettier-plugin-svelte", "prettier-plugin-tailwindcss"],
	"overrides": [
		{
			"files": "*.svelte",
			"options": {
				"parser": "svelte"
			}
		}
	]
}
</file>

<file path="README.md">
# sv

Everything you need to build a Svelte project, powered by [`sv`](https://github.com/sveltejs/cli).

## Creating a project

If you're seeing this, you've probably already done this step. Congrats!

```bash
# create a new project in the current directory
npx sv create

# create a new project in my-app
npx sv create my-app
```

## Developing

Once you've created a project and installed dependencies with `npm install` (or `pnpm install` or `yarn`), start a development server:

```bash
npm run dev

# or start the server and open the app in a new browser tab
npm run dev -- --open
```

## Building

To create a production version of your app:

```bash
npm run build
```

You can preview the production build with `npm run preview`.

> To deploy your app, you may need to install an [adapter](https://svelte.dev/docs/kit/adapters) for your target environment.
</file>

<file path="tsconfig.json">
{
	"extends": "./.svelte-kit/tsconfig.json",
	"compilerOptions": {
		"allowJs": true,
		"checkJs": true,
		"esModuleInterop": true,
		"forceConsistentCasingInFileNames": true,
		"resolveJsonModule": true,
		"skipLibCheck": true,
		"sourceMap": true,
		"strict": true,
		"moduleResolution": "bundler"
	}
	// Path aliases are handled by https://svelte.dev/docs/kit/configuration#alias
	// except $lib which is handled by https://svelte.dev/docs/kit/configuration#files
	//
	// If you want to overwrite includes/excludes, make sure to copy over the relevant includes/excludes
	// from the referenced tsconfig.json - TypeScript does not merge them in
}
</file>

<file path="src/lib/components/ui/button/button.svelte">
<script lang="ts" module>
	import type { WithElementRef } from 'bits-ui';
	import type { HTMLAnchorAttributes, HTMLButtonAttributes } from 'svelte/elements';
	import { type VariantProps, tv } from 'tailwind-variants';

	// --- MODIFICATIONS START HERE ---
	export const buttonVariants = tv({
		// Updated base styles using CSS variables where appropriate
		base: 'inline-flex items-center justify-center whitespace-nowrap rounded-[var(--radius-base)] text-sm font-[var(--font-weight-base)] ring-offset-white transition-all gap-2 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-black focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',
		variants: {
			// Replaced variants with the new ones, using CSS variables
			variant: {
				default:
					'text-[var(--border)] border-[3px] border-[var(--border)] shadow-[var(--shadow-shadow)] hover:translate-x-[var(--spacing-boxShadowX)] hover:translate-y-[var(--spacing-boxShadowY)] hover:shadow-none',
				noShadow: 'text-[var(--main-foreground)] border-[3px] border-[var(--border)]',
				neutral:
					'text-[var(--foreground)] border-[3px] border-[var(--border)] shadow-[var(--shadow-shadow)] hover:translate-x-[var(--spacing-boxShadowX)] hover:translate-y-[var(--spacing-boxShadowY)] hover:shadow-none',
				reverse:
					'text-[var(--main-foreground)] border-[3px] border-[var(--border)] hover:translate-x-[var(--spacing-reverseBoxShadowX)] hover:translate-y-[var(--spacing-reverseBoxShadowY)] hover:shadow-[var(--shadow-shadow)]'
				// Original variants removed, add back if needed
			},
			// Kept original sizes, updated icon size slightly
			size: {
				default: 'h-10 px-4 py-2',
				sm: 'h-9 rounded-md px-3', // Kept original Svelte sm style
				lg: 'h-11 rounded-md px-8',
				icon: 'size-10' // Updated to use size-* utility
			}
		},
		// Kept default variants
		defaultVariants: {
			variant: 'default',
			size: 'default'
		}
	});
	// --- MODIFICATIONS END HERE ---

	// Types automatically adapt to the new variants
	export type ButtonVariant = VariantProps<typeof buttonVariants>['variant'];
	export type ButtonSize = VariantProps<typeof buttonVariants>['size'];

	// Props definition remains the same
	export type ButtonProps = WithElementRef<HTMLButtonAttributes> &
		WithElementRef<HTMLAnchorAttributes> & {
			variant?: ButtonVariant;
			size?: ButtonSize;
		};
</script>

<script lang="ts">
	// No changes needed for cn import
	import { cn } from '$lib/utils.js';

	// ButtonProps type is directly available from the module script above
	let {
		class: className,
		variant = 'default',
		size = 'default',
		ref = $bindable(null),
		href = undefined,
		type = 'button',
		children,
		...restProps
	}: ButtonProps = $props();
</script>

<!-- No changes in the template -->
{#if href}
	<a bind:this={ref} class={cn(buttonVariants({ variant, size }), className)} {href} {...restProps}>
		{@render children?.()}
	</a>
{:else}
	<button
		bind:this={ref}
		class={cn(buttonVariants({ variant, size }), className)}
		{type}
		{...restProps}
	>
		{@render children?.()}
	</button>
{/if}

<!--
  Reminder: This component now heavily relies on CSS variables defined in your global CSS (src/app.css),
  such as:
  --radius-base, --font-weight-base, --main-foreground, --main, --border, --shadow-shadow,
  --spacing-boxShadowX, --spacing-boxShadowY, --secondary-background, --foreground,
  --spacing-reverseBoxShadowX, --spacing-reverseBoxShadowY

  Ensure these are correctly defined for the styles to apply.
-->
</file>

<file path=".prettierignore">
# Package Managers
package-lock.json
pnpm-lock.yaml
yarn.lock
</file>

<file path="postcss.config.js">
export default {
	plugins: {
		tailwindcss: {},
		autoprefixer: {}
	}
};
</file>

<file path="vite.config.ts">
import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vite';

export default defineConfig({
	plugins: [sveltekit()]
});
</file>

<file path="src/articles/first.toml">
[[title]]
name = "From 6 Days to 30 Minutes, How to Think about Programing"
slug = "from-six-days-to-thirty-minutes-how-to-think-about-programing"
blurb = "Optimizing large-scale data processing: A Python (6 days) to Rust (30 minutes) transition "
tags = [
    "Rust",
    "Python",
    "Performance",
    "Optimization",
    "Data Processing",
    "Big Data",
    "Zstd",
    "FEC",
]
date = "2025-4-13"
content = """
# Who Am I

For those who don't know, my name is karma jade rose. I am a python dev turned rust dev ,along the way I learned web dev, as well as low level avr stuff for robotics. In short, I'm in a lot of fields, and because of this, I may offer a unique point of view programming design. This documents my time as a programmer in a start up, working with technology that is pretty new to me. Working on performance related tasks when I could choose what language and what tools to do.

In this post, I'll walk you through my journey of optimizing a  data processing taskâfrom a naive Python implementation taking 6 days to a high-performance Rust solution running in 30 minutesâsharing lessons on profiling, memory management, and multithreading techniques you can apply to your own projects.

# Define the Problem, Sorta

Before you start programming, you should get in the habit of understanding what your problem is, and what's its scope. But that does not mean you should take a whiteboard and make everything on it. That just means you should mull over the product requirements. Just enough to sorta know what you're getting into.

Our problem today is simple, I want to track where the donations are going from people, to corporations. Because of the Open Government Data Act, the FEC (Federal Election Committee) publishes a database (in pg_data) of all donations reported. Our startup needs to parse about 1E8 for every one year period. That's about 1E10 lines of dirty data in all. We want to sum every person's donation, to each organization every year.

# The Naive Implementation

When you have a problem that can be broken up into chunks, you should break it into smaller chunks, and write a "naive" implementation. That means just open up a file in the language of your choosing and write it there. Don't worry about language choice, don't worry about best practices, just worry about getting a solution down. Only refactor when you feel like screaming.

In this case, I took this first 100 lines of my CSV file, and wrote it in Pandas and Python, after manually validating that the output was correct. I tried it with 1E5 lines, then the whole dataset. Once it got to about 1E7, the program kept running out of memory. No good. So I switched to using Polars with the lazy dataframe approach, but because of the size of the output dataframe, it kept running out of memory. No good still, I just decided to stream the data from the compressed zstd archive, and line by line write to a CSV file for every line. It took 6 days, but at least it didn't crash.

# Problem Definition, Again But Better This Time

Now that you know what you're kind of doing. You can set your project guidelines better. Go back to that bulletpoint list that you have, and add the things that you learned from your toy implementation. Now and only now is the time to set performance target. Then, let the optimizing begin.

I learned that memory management and compressed archive reading were far more demanding bottlenecks than expected. The computational operations consumed more resources than anticipated, resulting in performance that is not acceptable. In my case, I added that it has memory constraints and the output needs to be inspectable while the program is running. I set a target of 30 mins as `zstdcat file.csv.zst | wc -l` took about 20 minutes, so it shouldn't take much more than that realistically.

# Now the Fun Part: Speed Up Time

Before you do any performance stuff, trash your first implementation. The point is you wrote it bad, and now it's time to write it again with the knowledge you now gained. After that, Profile Profile Profile. You think you know your code and what's slow and what's fast? You don't, and if you really do, this article is not meant for you. Take your time and use a profiler. I ended up using functiontrace for Python, and samply for Rust.

I really recommend these tools as it gives you all of the performance data on profiler.firefox.com. That way you can both open and inspect the perf data in a generic way. My advice is to look at the flame graph and see what is taking all of your time. While I'm here giving some advice. I would commit all of your perf data to your Git when you change your implementation. So you can see how your stuff changed.

In my case (quite obviously), the opening of the CSV file, finding all of the rows to change then changing, then writing. It was taking 60% of the CPU time. At around the same point, I felt as if I was hacking Python to go EVEN FASTER. And I decided to change languages to Rust at this point. Normally, I tend to choose Rust when Python starts to become unbearably slow or terribly not readable anymore. This table shows what I was able to do 

| Ideas                       | Runtime | Improvement Factor |
| --------------------------- | ------- | ------------------ |
| Naive Python                | 6 days  | Baseline           |
| Rust Conversion             | 1 day   | 6x                 |
| String Parsing Optimization | 6 hours | 4x                 |
| Multi-threading             | 30 min  | 12x                |
| Total                       | 30 min  | 288x               |

# Why Python is Slow, and Rust is Fast (at this)

The reason why Python can be pretty slow for this is because it just doesn't let you handle memory in an easy way. It will just decide for me how long variables live for, and when things get allocated and deallocated, that's not really a problem for a proof of concept or a first crack at an idea. But when you start doing performance stuff, it feels like the language starts to fight you on the readability front when you start making more performance choices. In short, it feels like Python is either readable, or fast. But rarely is it both. On the other hand, since Rust is a compiled language with a borrow checker, I can write kind of whatever I want, huck it into a function with defined errors and types and pretend that the impl is a black box unless I need to deal with it again. and it will deallocated and allocated thing very explicitly. This is extremely useful if you have a bunch of short-lived variables.

(I might write a blog on why I choose what I choose).

# From 6 Days to 1 Day: Changing Languages

I don't think rust is always the right answer for the job, but in this case, I really like the way that rust tends to handle thing like memory management. I ended up writing basically the same implementation in Python, reducing the memory overhead to 1GB and sped things up to about 1 day. This was a 6x speedup, just by switching languages. Look at the profiling data, Python was spending a lot of time dropping variables and cleaning things up. It also took a lot of time getting the row of the file. When the compiler can know when and where to drop things, it speeds up.

# From 1 Day to 6 Hours: Optimizing String Parsing

Looking again at the profiling data, I found that more than 80 percent of my time is spent parsing the string, with a bunch of memory allocations happening in the from_str. So let's look at the code


```rust
fn from_str(s: &str) -> Result<Self, Self::Err> {
        // Split on the pipe delimiter.
        let fields: Vec<&str> = s.split('|').collect();
        if fields.len() != 81 {
            return Err(ParseRecordError(format!(
                "Expected 81 fields, got {}",
                fields.len()
            )));
        }

        Ok(Record {
            committee_id: fields[0].trim().to_string(),
            committee_name: fields[1].trim().to_string(),
	         .....})
```

In this case, the from_str function takes a borrowed string slice (&str), temporarily allocates heap memory for a Vec containing slices pointing into the original string, and then performs numerous heap allocations to create owned String data for the fields of the Record struct it constructs and returns it. In short, I am creating a lot of intermediary data, that has to be allocated and deallocated taking a lot of CPU time. If I was just looking at the code, I would have thought that the database lookups were taking most of the time. After some amount of optimizing, I arrive on the following code block.

```rust 
pub fn from_bytes(bytes: &[u8]) -> Result<Self, ParseRecordError> {
   // Split the byte slice on pipe character
   let mut fields: Vec<&[u8]> = Vec::with_capacity(81);
   let mut start = 0;

   for i in 0..bytes.len() {
	  if bytes[i] == b'|' {
		 fields.push(&bytes[start..i]);
		 start = i + 1;
	  }
   }
   // Add the last field
   fields.push(&bytes[start..]);

   if fields.len() != 81 {
	  return Err(ParseRecordError(format!(
		 "Expected 81 fields, got {}",
		 fields.len()
	  )));
   }

   // Parse fields directly from bytes where possible
   Ok(Record {
	  committee_id: String::from_utf8_lossy(fields[0]).trim().to_string(),
	  committee_name: String::from_utf8_lossy(fields[1]).trim().to_string(),
	  contributor_id: String::from_utf8_lossy(fields[2]).trim().to_string(),
	  ...}
	  )
}
```

In the optimized case, the from_bytes function takes a borrowed byte slice `&[u8]`, performs one initial heap allocation for a `Vec` to hold references to byte segments within the input, and then performs numerous subsequent heap allocations when converting these byte segments into owned String fields for the `Record` struct it constructs and returns. Instead of copying allocated and deallocated things, you just reserve the memory.

This ends up giving a 4x speed up.

# From 6 Hours To 30 Min: Multi-Threading

Now that I've optimized the single-threaded performance, let's see how we can multi-thread it. Even though I am using Rust, a lot of these principles will transfer to your language of choice. Let's look at the single-thread performance. First, the workflow starts with reading the file (15%) and then structuring that data into an array of 5000 Record objects (40%). Next, it fetches current items from the database (15%) and performs the required calculations (10%). Finally, the processed results are inserted back into the database (20%). While the array is being generated, 45% of the code is just waiting, So what I ended up doing is spawning on another thread that does the file reading, and having it send to a single thread that did the database stuff. That took the code running in 3 hours. Looking at some benchmarking, the file reading part was just waiting on the database part, but because we broke things up, I just spawned more databases, and routed which thread based on some metadata. I ended up spawning 8 threads, and 1 thread for file reading.

# What is Left on the Table

String parsing could be faster, because of how the compressed archive reader works, it's fastest when it's reading in chunks of 2E16 bytes. It's probably faster to take a multirow chunk, create an array of objects, then send it on the pipe, then reading it row by row. You could also probably read a bunch of rows into memory, then do it the parsing, then optimize the chunk size for the faster read and write. You could probably open a file reader, and jump 100000 lines and merge the output stream. You could parse what you needed and not everything. That could speed things up immensely. 

# Footnote

I have tried rewriting the rust implementation into Nom, and it went faster in the 1E7 case, but when it went to the full file, it did not change the speed by more than 3%, so I decided to scrap the implementation. Once I wrote this blog I looked more into Apache arrow, but could not find a way to export things to that format without my machine running out of memory.

In other news, this is the first time I am writing a blog. Let me know how it reads."""
</file>

<file path=".gitignore">
node_modules

# Output
.output
.vercel
.netlify
.wrangler
/.svelte-kit
/build

# OS
.DS_Store
Thumbs.db

# Env
.env
.env.*
!.env.example
!.env.test

# Vite
vite.config.js.timestamp-*
vite.config.ts.timestamp-*

# Repomix
**/repomix-output.xml
repomix-output.xml
</file>

<file path="eslint.config.js">
import prettier from 'eslint-config-prettier';
import js from '@eslint/js';
import { includeIgnoreFile } from '@eslint/compat';
import svelte from 'eslint-plugin-svelte';
import globals from 'globals';
import { fileURLToPath } from 'node:url';
import ts from 'typescript-eslint';
const gitignorePath = fileURLToPath(new URL('./.gitignore', import.meta.url));

export default ts.config(
	includeIgnoreFile(gitignorePath),
	js.configs.recommended,
	...ts.configs.recommended,
	...svelte.configs['flat/recommended'],
	prettier,
	...svelte.configs['flat/prettier'],
	{
		languageOptions: {
			globals: {
				...globals.browser,
				...globals.node
			}
		}
	},
	{
		files: ['**/*.svelte'],

		languageOptions: {
			parserOptions: {
				parser: ts.parser
			}
		}
	}
);
</file>

<file path="src/lib/frontpage/Footer.svelte">
<script lang="ts">
	import { Button } from '$lib/components/ui/button';
	import { Separator } from '$lib/components/ui/separator';
	import ExternalLinkIcon from '$lib/components/icons/ExternalLinkIcon.svelte';
	import GithubIcon from '$lib/components/icons/GithubIcon.svelte';
	import LinkedinIcon from '$lib/components/icons/LinkedinIcon.svelte';
	import { goto } from '$app/navigation';

	const currentYear = new Date().getFullYear();
</script>

<footer class="w-full bg-background">
	<Separator />
	<div class="mx-auto">
		<div class="flex flex-col gap-8 md:flex md:flex-row md:items-stretch">
			<Separator orientation="vertical" class="w-1" />

			<div class="ml-8 mt-2 flex-1">
				<h3 class="mb-4 text-2xl font-black uppercase tracking-wider text-foreground">
					Quick Links
				</h3>
				<ul class="font-base space-y-3">
					<li>
						<a
							href="/"
							class="hover:bg-main hover:text-main-foreground inline-block border-4 border-transparent px-4 py-1 text-foreground transition-all duration-200 hover:border-border"
							>Home</a
						>
					</li>
					<li>
						<a
							href="/"
							class="hover:bg-main hover:text-main-foreground inline-block border-4 border-transparent px-4 py-1 text-foreground transition-all duration-200 hover:border-border"
							>Projects</a
						>
					</li>
					<li>
						<a
							href="/blog/"
							target="_blank"
							rel="noopener noreferrer"
							class="hover:bg-main hover:text-main-foreground inline-flex items-center border-4 border-transparent px-4 pb-4 text-foreground transition-all duration-200 hover:border-border"
						>
							Blogs
							<ExternalLinkIcon />
						</a>
					</li>
				</ul>
			</div>

			<Separator orientation="vertical" class="w-1" />

			<div class="mt-2 flex-1">
				<h3 class="mb-4 text-2xl font-black uppercase tracking-wider text-foreground">
					Get in Touch!
				</h3>
				<div class="mb-8 flex flex-col items-start">
					<div class="mb-6 flex space-x-6">
						<a
							href="https://github.com/prudhviboggavarapu"
							target="_blank"
							rel="noopener noreferrer"
							class="hover:text-main text-4xl text-foreground transition-colors duration-300"
							aria-label="GitHub"
						>
							<GithubIcon />
						</a>
						<a
							href="https://www.linkedin.com/in/prudhviboggavarapu/"
							target="_blank"
							rel="noopener noreferrer"
							class="hover:text-main text-4xl text-foreground transition-colors duration-300"
							aria-label="LinkedIn"
						>
							<LinkedinIcon />
						</a>
					</div>
					<Button
						variant="default"
						class="bg-[var(--neobrutalism-yellow-50)] text-black dark:bg-[var(--neobrutalism-yellow-50)]"
						onclick={() => goto('/linktree')}
					>
						Contact Me
					</Button>
				</div>
			</div>

			<Separator orientation="vertical" class="hidden md:block" />
			<div class="mt-2 flex-1">
				<h3 class="mb-4 text-2xl font-black uppercase tracking-wider text-foreground">
					Placeholder
				</h3>
				<p class="font-base text-foreground">Maybe some extra info here.</p>
			</div>
			<Separator orientation="vertical" class="w-1" />
		</div>

		<Separator />

		<div
			class="flex flex-col items-center justify-between gap-4 md:flex md:flex-row md:items-stretch"
		>
			<p class="ml-8 text-center font-bold text-foreground md:text-left">
				Â© {currentYear} Karma | Built with love by
				<a href="https://karmajaderose.com" class="text-main-foreground underline">Karma</a>
			</p>

			<Separator class="w-1/2 md:hidden" />

			<div
				class="content-evenly bg-black px-2 font-mono text-sm text-white dark:bg-background dark:text-foreground"
			>
				&lt;/&gt; with <a href="https://svelte.dev/" class="text-main-foreground hover:underline"
					>SvelteKit</a
				>
				+
				<a href="https://www.shadcn-svelte.com/" class="text-main-foreground hover:underline"
					>Shadcn UI Svelte</a
				>
			</div>
		</div>
		
	</div>
</footer>
</file>

<file path="src/lib/frontpage/Header.svelte">
<script lang="ts">
	import { Button } from '$lib/components/ui/button';
	import { themeStore } from '$lib/stores/themeStore';
	import {
		Sheet,
		SheetContent,
		SheetHeader,
		SheetTitle,
		SheetTrigger,
		SheetClose
	} from '$lib/components/ui/sheet';
	import { Separator } from '$lib/components/ui/separator'; // Import Separator
	import { goto } from '$app/navigation';

	import LogoPlaceholder from '$lib/components/icons/LogoPlaceholder.svelte';
	import ExternalLinkIcon from '$lib/components/icons/ExternalLinkIcon.svelte';
	import SunIcon from '$lib/components/icons/SunIcon.svelte';
	import MoonIcon from '$lib/components/icons/MoonIcon.svelte';
	import Menu from '@lucide/svelte/icons/menu';
</script>

<nav class="bg-main shadow-shadow w-full border-4 border-border">
	<!-- Ensure the main container has a defined height -->
	<div class="mx-auto flex h-[64px] w-full items-stretch justify-between px-6">
		<!-- Logo section - align self center if needed -->
		<h1
			class="text-main-foreground min-w-[50px] transform self-center text-3xl font-black tracking-tight transition-transform duration-300 hover:rotate-0 lg:text-5xl"
		>
			<a href="/" class="text-main-foreground block">
				<LogoPlaceholder />
			</a>
		</h1>

		<!-- Desktop Navigation -->
		<!-- Use items-stretch to make children fill height -->
		<div class="font-base hidden items-stretch gap-4 text-base md:flex lg:text-lg">
			<Separator orientation="vertical" class="w-[3px]" />
			<a
				href="/"
				class="text-main-foreground transform self-center px-2 py-1 font-bold transition-all duration-200 hover:-translate-y-1 hover:rotate-2"
				>Home</a
			>

			<!-- Separator will now stretch - remove h-6 -->
			<Separator orientation="vertical" class="w-[3px]" />

			<a
				href="/"
				class="text-main-foreground transform self-center px-2 py-1 font-bold transition-all duration-200 hover:-translate-y-1 hover:rotate-2"
				>Projects</a
			>

			<Separator orientation="vertical" class="w-[3px]" />

			<a
				href="/blog/"
				target="_blank"
				rel="noopener noreferrer"
				class="text-main-foreground transform self-center px-2 py-1 font-bold transition-all duration-200 hover:-translate-y-1 hover:rotate-2"
			>
				Blogs
				<ExternalLinkIcon />
			</a>

			<Separator orientation="vertical" class="w-[3px]" />

			<a
				href="/linktree"
				target="_blank"
				rel="noopener noreferrer"
				class="text-main-foreground transform self-center px-2 py-1 font-bold transition-all duration-200 hover:-translate-y-1 hover:rotate-2"
			>
				Contact Me
			</a>
			<Separator orientation="vertical" class="w-[3px]" />

			<!-- Group Contact and Theme buttons - align items center within this group -->
			<div class="flex items-center gap-4 self-center">
				<Button variant="neutral" size="icon" onclick={themeStore.toggle} aria-label="Toggle theme">
					{#if $themeStore.mounted}
						{#if $themeStore.isDark}
							<SunIcon />
						{:else}
							<MoonIcon />
						{/if}
					{/if}
					<span class="sr-only">Toggle theme</span>
				</Button>
			</div>
		</div>

		<!-- Mobile Navigation - align self center -->
		<div class="flex items-center gap-4 self-center md:hidden">
			<Button variant="neutral" size="icon" onclick={themeStore.toggle} aria-label="Toggle theme">
				{#if $themeStore.mounted}
					{#if $themeStore.isDark}
						<SunIcon />
					{:else}
						<MoonIcon />
					{/if}
				{/if}
				<span class="sr-only">Toggle theme</span>
			</Button>

			<Sheet>
				<SheetTrigger
					class="inline-flex h-10 w-10 items-center justify-center whitespace-nowrap rounded-[var(--radius-base)] border-2 border-[var(--border)] text-sm font-[var(--font-weight-base)] shadow-[var(--shadow-shadow)] ring-offset-white transition-all hover:translate-x-[var(--spacing-boxShadowX)] hover:translate-y-[var(--spacing-boxShadowY)] hover:shadow-none focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-black focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0"
					aria-label="Open menu"
				>
					<Menu class="size-5" />
					<span class="sr-only">Open menu</span>
				</SheetTrigger>
				<SheetContent side="right" class="w-[280px] border-l-4 border-border bg-background p-6">
					<SheetHeader class="mb-6 text-left">
						<SheetTitle class="font-heading text-2xl">Menu</SheetTitle>
					</SheetHeader>
					<nav class="flex flex-col">
						<SheetClose>
							<a href="/" class="hover:text-main block py-2 text-lg font-bold text-foreground"
								>Home</a
							>
						</SheetClose>

						<Separator class="my-1" />

						<SheetClose>
							<a href="/" class="hover:text-main block py-2 text-lg font-bold text-foreground"
								>Journey</a
							>
						</SheetClose>

						<Separator class="my-1" />

						<SheetClose>
							<a href="/" class="hover:text-main block py-2 text-lg font-bold text-foreground"
								>Projects</a
							>
						</SheetClose>

						<Separator class="my-1" />

						<SheetClose>
							<a
								href="/blog/"
								target="_blank"
								rel="noopener noreferrer"
								class="hover:text-main inline-flex items-center gap-1 py-2 text-lg font-bold text-foreground"
							>
								Blogs
								<ExternalLinkIcon />
							</a>
						</SheetClose>

						<Separator class="my-4" />

						<SheetClose>
							<Button
								variant="default"
								class="w-full"
								onclick={() => {
									goto('/linktree');
								}}
							>
								Contact Me
							</Button>
						</SheetClose>
					</nav>
				</SheetContent>
			</Sheet>
		</div>
	</div>
</nav>
</file>

<file path="src/routes/blog/+page.svelte">
<!-- src/routes/blog/+page.svelte -->
<script lang="ts">
	import Header from '$lib/blog_stuff/Header.svelte';
	import type { PageData } from './+page.server.js'; // Import the type for loaded data
	let { data }: { data: PageData } = $props();
</script>

<div class="flex min-h-screen flex-col bg-background text-foreground">
	<Header />
	<main class="flex-grow">
		<div class="container mx-auto p-8">
			<h1 class="font-heading mb-6 border-b-2 border-border pb-4 text-4xl">Blog Posts</h1>

			{#if data.posts && data.posts.length > 0}
				<div class="space-y-8">
					{#each data.posts as post}
						<article class="shadow-shadow rounded-[var(--radius-base)] border-2 border-border p-6">
							<h2 class="font-heading mb-2 text-2xl">{post.name}</h2>
							<p class="mb-4 text-sm text-foreground/80">
								Published on: {post.date.toLocaleDateString('en-US', {
									year: 'numeric',
									month: 'long',
									day: 'numeric'
								})}
							</p>
							{#if post.blurb}
								<p class="font-base mb-4">{post.blurb}</p>
							{/if}
							<a href="/blog/{post.slug}" class="text-main font-bold hover:underline">
								Read More
							</a>
						</article>
					{/each}
				</div>
			{:else}
				<p class="font-base text-center italic">More posts coming soon!</p>
			{/if}
		</div>
	</main>
</div>
</file>

<file path="src/routes/+layout.svelte">
<!-- src/routes/+layout.svelte -->
<script lang="ts">
	import '../app.css';
	import { onMount } from 'svelte';
	import { themeStore } from '$lib/stores/themeStore';

	let { children } = $props();

	// Initialize theme on client-side mount
	onMount(() => {
		themeStore.initialize();
	});
</script>

{@render children()}
</file>

<file path="src/routes/+page.svelte">
<!-- src/routes/+page.svelte -->
<script lang="ts">
	import Header from '$lib/frontpage/Header.svelte';
	import Footer from '$lib/frontpage/Footer.svelte';
	// Removed onMount and theme logic variables/functions
</script>

<div class="flex min-h-screen flex-col bg-background text-foreground">
	<Header />

	<!-- Main Content Area -->
	<main class="flex-grow">
		<div class="container mx-auto bg-background p-8">
			<h1 class="font-heading mb-4 text-3xl">Main Content Area</h1>
			<p class="font-base">This is where the main page content would go.</p>
			<p>
				Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut
				labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco
				laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in
				voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat
				cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
			</p>
			<!-- Add more placeholder content or actual sections here -->
			<div
				class="bg-secondary-background mt-8 flex h-96 items-center justify-center rounded-md border border-border"
			>
				Placeholder Content Block
			</div>
		</div>
	</main>

	<!-- Render Footer Component -->
	<Footer />
</div>
</file>

<file path="svelte.config.js">
import adapter from '@sveltejs/adapter-cloudflare';
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';

/** @type {import('@sveltejs/kit').Config} */
const config = {
	// Consult https://svelte.dev/docs/kit/integrations
	// for more information about preprocessors
	preprocess: vitePreprocess(),

	kit: {
		// adapter-auto only supports some environments, see https://svelte.dev/docs/kit/adapter-auto for a list.
		// If your environment is not supported, or you settled on a specific environment, switch out the adapter.
		// See https://svelte.dev/docs/kit/adapters for more information about adapters.
		adapter: adapter(),
		prerender: {
			entries: ['*'] // Explicitly tell SvelteKit to try and prerender all pages it finds
		}
	}
};

export default config;
</file>

<file path="tailwind.config.ts">
import containerQueries from '@tailwindcss/container-queries';
import typography from '@tailwindcss/typography';
import { fontFamily } from 'tailwindcss/defaultTheme';
import type { Config } from 'tailwindcss';
import tailwindcssAnimate from 'tailwindcss-animate';

const config: Config = {
	darkMode: ['class'],
	content: ['./src/**/*.{html,js,svelte,ts}'],
	safelist: ['dark'],
	theme: {
		container: {
			center: true,
			padding: '2rem',
			screens: {
				'2xl': '1400px'
			}
		},
		extend: {
			colors: {
				// --- Existing Shadcn/Theme Colors ---
				border: 'hsl(var(--border) / <alpha-value>)',
				input: 'hsl(var(--input) / <alpha-value>)', // Assuming you might define --input later
				ring: 'hsl(var(--ring) / <alpha-value>)',
				background: 'hsl(var(--background) / <alpha-value>)',
				foreground: 'hsl(var(--foreground) / <alpha-value>)',
				primary: {
					// Assuming you might define --primary later, or map it to --main
					DEFAULT: 'hsl(var(--main) / <alpha-value>)', // Map primary to --main
					foreground: 'hsl(var(--main-foreground) / <alpha-value>)' // Map primary-foreground to --main-foreground
				},
				secondary: {
					// Map secondary to --secondary-background
					DEFAULT: 'hsl(var(--secondary-background) / <alpha-value>)',
					// Assuming secondary-foreground is same as main text on secondary bg
					foreground: 'hsl(var(--foreground) / <alpha-value>)'
				},
				destructive: {
					// Map destructive to danger-50
					DEFAULT: 'hsl(var(--neobrutalism-danger-50) / <alpha-value>)',
					// Assuming white/black text on danger
					foreground: 'hsl(var(--main-foreground) / <alpha-value>)' // Or adjust as needed
				},
				muted: {
					// You might map muted to a lighter decorative color or define --muted
					DEFAULT: 'hsl(var(--neobrutalism-purple-90) / <alpha-value>)', // Example: Map to purple-90
					foreground: 'hsl(var(--foreground) / 0.6 / <alpha-value>)' // Example: Dimmed foreground
				},
				accent: {
					// Map accent to --main or another decorative color
					DEFAULT: 'hsl(var(--main) / <alpha-value>)',
					foreground: 'hsl(var(--main-foreground) / <alpha-value>)'
				},
				popover: {
					// Map popover background/foreground, often similar to card
					DEFAULT: 'hsl(var(--background) / <alpha-value>)',
					foreground: 'hsl(var(--foreground) / <alpha-value>)'
				},
				card: {
					// Map card background/foreground
					DEFAULT: 'hsl(var(--background) / <alpha-value>)',
					foreground: 'hsl(var(--foreground) / <alpha-value>)'
				},
				// Keep sidebar if you use it, otherwise remove
				sidebar: {
					DEFAULT: 'hsl(var(--sidebar-background))', // Define --sidebar-* vars if needed
					foreground: 'hsl(var(--sidebar-foreground))',
					primary: 'hsl(var(--sidebar-primary))',
					'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
					accent: 'hsl(var(--sidebar-accent))',
					'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
					border: 'hsl(var(--sidebar-border))',
					ring: 'hsl(var(--sidebar-ring))'
				},

				// --- Neobrutalism Decorative Colors ---
				'neobrutalism-pink-70': 'hsl(var(--neobrutalism-pink-70) / <alpha-value>)',
				'neobrutalism-pink-90': 'hsl(var(--neobrutalism-pink-90) / <alpha-value>)',

				'neobrutalism-purple-50': 'hsl(var(--neobrutalism-purple-50) / <alpha-value>)',
				'neobrutalism-purple-70': 'hsl(var(--neobrutalism-purple-70) / <alpha-value>)',
				'neobrutalism-purple-90': 'hsl(var(--neobrutalism-purple-90) / <alpha-value>)',

				'neobrutalism-blue-50': 'hsl(var(--neobrutalism-blue-50) / <alpha-value>)',
				'neobrutalism-blue-70': 'hsl(var(--neobrutalism-blue-70) / <alpha-value>)',
				'neobrutalism-blue-90': 'hsl(var(--neobrutalism-blue-90) / <alpha-value>)',

				'neobrutalism-yellow-50': 'hsl(var(--neobrutalism-yellow-50) / <alpha-value>)',
				'neobrutalism-yellow-70': 'hsl(var(--neobrutalism-yellow-70) / <alpha-value>)',
				'neobrutalism-yellow-90': 'hsl(var(--neobrutalism-yellow-90) / <alpha-value>)',

				'neobrutalism-green-50': 'hsl(var(--neobrutalism-green-50) / <alpha-value>)',
				'neobrutalism-green-70': 'hsl(var(--neobrutalism-green-70) / <alpha-value>)',
				'neobrutalism-green-90': 'hsl(var(--neobrutalism-green-90) / <alpha-value>)',

				// --- Feedback Colors ---
				'neobrutalism-danger-50': 'hsl(var(--neobrutalism-danger-50) / <alpha-value>)',
				'neobrutalism-danger-90': 'hsl(var(--neobrutalism-danger-90) / <alpha-value>)',
				'neobrutalism-warning-50': 'hsl(var(--neobrutalism-warning-50) / <alpha-value>)',
				'neobrutalism-warning-90': 'hsl(var(--neobrutalism-warning-90) / <alpha-value>)',
				'neobrutalism-success-50': 'hsl(var(--neobrutalism-success-50) / <alpha-value>)',

				// --- Other Palette Colors ---
				'neobrutalism-primary-50': 'hsl(var(--neobrutalism-primary-50) / <alpha-value>)',
				'neobrutalism-secondary-0': 'hsl(var(--neobrutalism-secondary-0) / <alpha-value>)',
				'neobrutalism-separator-90': 'hsl(var(--neobrutalism-separator-90) / <alpha-value>)',
				'neobrutalism-body-90': 'hsl(var(--neobrutalism-body-90) / <alpha-value>)',
				'neobrutalism-white-100': 'hsl(var(--neobrutalism-white-100) / <alpha-value>)'
			},
			borderRadius: {
				xl: 'calc(var(--radius) + 4px)',
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 2px)',
				sm: 'calc(var(--radius) - 4px)'
			},
			fontFamily: {
				sans: [...fontFamily.sans]
			},
			keyframes: {
				'accordion-down': {
					from: { height: '0' },
					to: { height: 'var(--bits-accordion-content-height)' }
				},
				'accordion-up': {
					from: { height: 'var(--bits-accordion-content-height)' },
					to: { height: '0' }
				},
				'caret-blink': {
					'0%,70%,100%': { opacity: '1' },
					'20%,50%': { opacity: '0' }
				}
			},
			animation: {
				'accordion-down': 'accordion-down 0.2s ease-out',
				'accordion-up': 'accordion-up 0.2s ease-out',
				'caret-blink': 'caret-blink 1.25s ease-out infinite'
			}
		}
	},
	plugins: [tailwindcssAnimate, typography, containerQueries]
};

export default config;
</file>

<file path="src/app.css">
@import 'tw-animate-css';
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Your custom imports */

/* Your custom directives */
/* Ensure required PostCSS plugins are configured for these */
@custom-variant dark (&:is(.dark *));

@layer base {

	/* --- Neobrutalist Light/Dark Purple Theme --- */

	/* :root variables (Light Mode) */
	:root {
		/* Core Theme Variables */
		--background: var(--neobrutalism-purple-90);
		/* Light Purple background */
		--secondary-background: oklch(100% 0 0);
		/* White secondary for contrast */
		--foreground: oklch(0% 0 0);
		/* Black text */
		--main: #9723C9;
		/* Vibrant Purple accent */
		--main-foreground: oklch(100% 0 0);
		/* White text on accent */
		--border: oklch(0% 0 0);
		/* Black borders */
		--ring: oklch(0% 0 0);
		/* Black focus ring */
		--overlay: oklch(0% 0 0 / 0.8);
		/* Black overlay */
		--shadow: 2px 2px 0px 0px var(--border);
		/* Solid black offset shadow */
		--radius: 10px;
		/* Decorative Pink */
		--neobrutalism-pink-70: #FFC6E7;
		--neobrutalism-pink-90: #FFE2F3;

		/* Decorative Purple */
		--neobrutalism-purple-50: #B37DFF;
		--neobrutalism-purple-70: #D9BEFF;
		--neobrutalism-purple-90: #F0E5FF;
		/* Same as --background */

		/* Decorative Blue */
		--neobrutalism-blue-50: #8AF1FF;
		--neobrutalism-blue-70: #B3F6FF;
		--neobrutalism-blue-90: #D6FAFF;

		/* Decorative Yellow */
		--neobrutalism-yellow-50: #FFE959;
		--neobrutalism-yellow-70: #FFF29B;
		--neobrutalism-yellow-90: #FFF8C5;

		/* Decorative Green */
		--neobrutalism-green-50: #76F7AE;
		--neobrutalism-green-70: #ADFACE;
		--neobrutalism-green-90: #CFFCE3;

		/* --- Feedback Colors (Optional, added for completeness) --- */
		/* Feedback Danger */
		--neobrutalism-danger-50: #FF5454;
		--neobrutalism-danger-90: #FFD6D6;

		/* Feedback Warning */
		--neobrutalism-warning-50: #FF9F69;
		--neobrutalism-warning-90: #FFEAD1;

		/* Feedback Success */
		--neobrutalism-success-50: #3CD39D;

		/* --- Other Palette Colors (Optional) --- */
		--neobrutalism-primary-50: #FF8ACD;
		--neobrutalism-secondary-0: #000000;
		/* Same as --foreground */
		--neobrutalism-separator-90: #E2E2E2;
		--neobrutalism-body-90: #FFFBEE;
		--neobrutalism-white-100: #FFFFFF;
		/* Same as --secondary-background & --main-foreground */
	}

	/* .dark variables (Dark Mode) */
	.dark {
		/* Core Dark Theme Variables */
		--background: #241933;
		/* Dark Purple background */
		--secondary-background: oklch(0% 0 0);
		/* Black secondary for contrast */
		--foreground: oklch(100% 0 0);
		/* White text */
		--main: #9723C9;
		/* Vibrant Purple accent */
		--main-foreground: oklch(100% 0 0);
		/* White text on accent */
		--border: oklch(100% 0 0);
		/* White borders for contrast */
		--ring: oklch(100% 0 0);
		/* White focus ring */
		--overlay: oklch(0% 0 0 / 0.8);
		/* Black overlay */
		--shadow: 2px 2px 0px 0px var(--border);
		/* Solid white offset shadow */
		/* --radius: 10px; */
		/* Inherited */
	}

	/* @theme block - No changes needed here, it just maps variables */
	@theme inline {
		--color-main: var(--main);
		--color-background: var(--background);
		--color-secondary-background: var(--secondary-background);
		--color-foreground: var(--foreground);
		--color-main-foreground: var(--main-foreground);
		--color-border: var(--border);
		--color-overlay: var(--overlay);
		--color-ring: var(--ring);

		--spacing-boxShadowX: 2px;
		--spacing-boxShadowY: 2px;
		--spacing-reverseBoxShadowX: -2px;
		--spacing-reverseBoxShadowY: -2px;
		--radius-base: var(--radius);
		/* Use --radius variable */
		--shadow-shadow: var(--shadow);
		/* Use --shadow variable */
		--font-weight-base: 500;
		--font-weight-heading: 700;
	}

	/* Base styles */
	* {
		@apply border-border;
		/* Uses --border variable */
	}

	body {
		/* Apply background using the variable, NOT @apply */
		background-color: var(--background);
		/* Apply text color using the variable */
		color: var(--foreground);
	}

}
</file>

<file path="package.json">
{
	"name": "realwebsitesvelte5",
	"private": true,
	"version": "0.0.1",
	"type": "module",
	"scripts": {
		"dev": "vite dev",
		"build": "vite build",
		"preview": "vite preview",
		"prepare": "svelte-kit sync || echo ''",
		"check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
		"check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch",
		"format": "prettier --write .",
		"lint": "prettier --check . && eslint ."
	},
	"devDependencies": {
		"@eslint/compat": "^1.2.5",
		"@eslint/js": "^9.18.0",
		"@lucide/svelte": "^0.487.0",
		"@sveltejs/adapter-cloudflare": "^5.0.1",
		"@sveltejs/kit": "^2.16.0",
		"@sveltejs/vite-plugin-svelte": "^5.0.0",
		"@tailwindcss/container-queries": "^0.1.1",
		"@tailwindcss/forms": "^0.5.10",
		"@tailwindcss/typography": "^0.5.16",
		"autoprefixer": "^10.4.20",
		"bits-ui": "^1.3.18",
		"clsx": "^2.1.1",
		"eslint": "^9.18.0",
		"eslint-config-prettier": "^10.0.1",
		"eslint-plugin-svelte": "^2.46.1",
		"globals": "^15.14.0",
		"prettier": "^3.4.2",
		"prettier-plugin-svelte": "^3.3.3",
		"prettier-plugin-tailwindcss": "^0.6.10",
		"svelte": "^5.0.0",
		"svelte-check": "^4.0.0",
		"tailwind-merge": "^3.2.0",
		"tailwind-variants": "^1.0.0",
		"tailwindcss": "^3.4.17",
		"tailwindcss-animate": "^1.0.7",
		"typescript": "^5.0.0",
		"typescript-eslint": "^8.20.0",
		"vite": "^6.0.0"
	},
	"packageManager": "pnpm@9.15.4+sha512.b2dc20e2fc72b3e18848459b37359a32064663e5627a51e4c74b2c29dd8e8e0491483c3abb40789cfd578bf362fb6ba8261b05f0387d76792ed6e23ea3b1b6a0",
	"dependencies": {
		"@iconify/svelte": "^4.2.0",
		"fuse.js": "^7.1.0",
		"marked": "^15.0.8",
		"toml": "^3.0.0",
		"tw-animate-css": "^1.2.5"
	}
}
</file>

</files>
